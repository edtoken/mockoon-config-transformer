{
  "uuid": "fdc19cc4-d758-4fa4-8cfa-44403815ea0b",
  "lastMigration": 24,
  "name": "MetaPub",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3000,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "3e270cb0-ab5c-4e40-aa30-82437770b995",
      "documentation": "Upload a file.",
      "method": "post",
      "endpoint": "api/v2/cddrive/files/content",
      "responses": [
        {
          "uuid": "551691d5-d929-44d2-822c-a2700bc103b5",
          "body": "{\n  \"createdDate\": \"\",\n  \"id\": {{faker 'datatype.number'}},\n  \"lastModifiedDate\": \"\",\n  \"name\": \"\",\n  \"parentId\": {{faker 'datatype.number'}},\n  \"size\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 201,
          "label": "The file was created successfully. The response contains the file metadata.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "9098ac21-8b63-43e6-a5f4-5865ed6ff07c",
          "body": "",
          "latency": 0,
          "statusCode": 400,
          "label": "The provided Content-MD5 header doesn't match the provided content",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "ed3c39cc-b7f1-4c75-bfd7-46ea264c4595",
          "body": "",
          "latency": 0,
          "statusCode": 403,
          "label": "Authorization failed, Username or password not found or incorrect.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "cf0434c4-e916-4836-8a91-fdbcc9d05314",
          "body": "",
          "latency": 0,
          "statusCode": 404,
          "label": "A parent id cannot be found.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f187df69-94bd-4594-9c26-6ee5bd059020",
          "body": "",
          "latency": 0,
          "statusCode": 409,
          "label": "A name conflict because the file already exists.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "72655bfe-491c-48b4-b56a-a553bd228c2c",
          "body": "",
          "latency": 0,
          "statusCode": 413,
          "label": "File is bigger than maximum size of 500 MB.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "43599f80-0510-48fe-9748-1d7a1b86c907",
      "documentation": "Delete a file.",
      "method": "delete",
      "endpoint": "api/v2/cddrive/files/{file-id}",
      "responses": [
        {
          "uuid": "9125c436-68fd-4d99-ae98-2c99b046489c",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "The file was successfully deleted.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "1ad3b993-9940-4dd5-8c59-9fb37cad4824",
          "body": "",
          "latency": 0,
          "statusCode": 404,
          "label": "The file cannot be found.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "b2608ba6-2af2-42c3-aed5-7d4f139528c1",
      "documentation": "Get file information.",
      "method": "get",
      "endpoint": "api/v2/cddrive/files/{file-id}",
      "responses": [
        {
          "uuid": "5b806a19-2691-4d42-a384-8aaac2a670b9",
          "body": "{\n  \"createdDate\": \"\",\n  \"id\": {{faker 'datatype.number'}},\n  \"lastModifiedDate\": \"\",\n  \"name\": \"\",\n  \"parentId\": {{faker 'datatype.number'}},\n  \"size\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "The file information.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "4ea3a2b4-9ddd-4e9f-a276-a1cc68533f18",
          "body": "",
          "latency": 0,
          "statusCode": 404,
          "label": "The file cannot be found.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "d1d151aa-1a60-4edc-a29f-794699ed579e",
      "documentation": "Download a file.",
      "method": "get",
      "endpoint": "api/v2/cddrive/files/{file-id}/content",
      "responses": [
        {
          "uuid": "a0b6a6dc-4988-41a6-9283-55a2074eb213",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "The file was found and will be returned in the body of the response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/octet-stream"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "4fa25b62-da4f-4b8f-a7f3-f55d56de6b42",
          "body": "",
          "latency": 0,
          "statusCode": 302,
          "label": "The file was found but should be downloaded at the URL presented in the Location header. This return code may be used when the file is available via a CDN or other optimized path.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/octet-stream"
            },
            {
              "key": "Location",
              "value": ""
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "6cf8cf92-0401-46b9-b882-2bf91ba26938",
          "body": "",
          "latency": 0,
          "statusCode": 404,
          "label": "The file cannot be found.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/octet-stream"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "14c6b982-5a65-4c92-87da-9b57736fc042",
      "documentation": "Create a folder.",
      "method": "post",
      "endpoint": "api/v2/cddrive/folders",
      "responses": [
        {
          "uuid": "4fd53e91-b6ce-43b2-951f-bc07a7e3481b",
          "body": "{\n  \"createdDate\": \"\",\n  \"id\": {{faker 'datatype.number'}},\n  \"lastModifiedDate\": \"\",\n  \"name\": \"\",\n  \"parentId\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "The folder information.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "4cb80cf5-29fa-4244-bc22-612eaf83670b",
          "body": "",
          "latency": 0,
          "statusCode": 403,
          "label": "Authorization failed, Username or password not found or incorrect.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "801e8e0f-824f-48bb-b379-42bfa586796f",
          "body": "",
          "latency": 0,
          "statusCode": 404,
          "label": "A parent id cannot be found.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f38fdb03-e9fb-4a07-a40d-97f47da2cd01",
          "body": "",
          "latency": 0,
          "statusCode": 409,
          "label": "The folder already exists.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "346ec548-2b45-43f5-a0ad-4eb7fa21d124",
      "documentation": "Delete a folder.",
      "method": "delete",
      "endpoint": "api/v2/cddrive/folders/{folder-id}",
      "responses": [
        {
          "uuid": "5e5572b2-3bc4-4f6f-a35a-acc52e2e352c",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "The file was successfully deleted.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "4aa1e181-e058-4b2d-8434-c6587fdfa6c4",
          "body": "",
          "latency": 0,
          "statusCode": 404,
          "label": "The file cannot be found.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "f13e898b-2034-4400-a17b-8ce69919b80d",
      "documentation": "Get folder information.",
      "method": "get",
      "endpoint": "api/v2/cddrive/folders/{folder-id}",
      "responses": [
        {
          "uuid": "43e909ad-c74c-4838-b8bf-c1cde89a1662",
          "body": "{\n  \"createdDate\": \"\",\n  \"id\": {{faker 'datatype.number'}},\n  \"lastModifiedDate\": \"\",\n  \"name\": \"\",\n  \"parentId\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "The folder information.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "66edc3c7-f26b-474c-8324-5b35c0c37d83",
          "body": "",
          "latency": 0,
          "statusCode": 404,
          "label": "The folder cannot be found.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "9a601a3d-30a1-4fbb-8418-5d6de955d7a3",
      "documentation": "Get the items in the folder.",
      "method": "get",
      "endpoint": "api/v2/cddrive/folders/{folder-id}/items",
      "responses": [
        {
          "uuid": "d99621c6-6fa8-49eb-adcf-32f79f75f6ae",
          "body": "{\n  \"entries\": [\n    {\n      \"id\": {{faker 'datatype.number'}},\n      \"name\": \"\",\n      \"type\": \"{{oneOf (array 'file' 'folder')}}\"\n    }\n  ],\n  \"limit\": {{faker 'datatype.number'}},\n  \"offset\": {{faker 'datatype.number'}},\n  \"totalCount\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "The folder information.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "f0936e56-88c1-4b1f-8330-cf76cc204367",
          "body": "",
          "latency": 0,
          "statusCode": 404,
          "label": "The folder cannot be found.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "607d22bc-168b-4216-b90c-1d237b3e5ed4",
      "documentation": "Create a batch operation on EPG information.",
      "method": "post",
      "endpoint": "api/v2/metapub/program-information/batch",
      "responses": [
        {
          "uuid": "e83af495-9250-4ab0-a747-490f4c22247c",
          "body": "{\n  \"createdDate\": \"\",\n  \"finishedDate\": \"\",\n  \"format\": \"{{oneOf (array 'radiodns')}}\",\n  \"id\": {{faker 'datatype.number'}},\n  \"message\": \"\",\n  \"name\": \"\",\n  \"program\": {\n    \"airDate\": \"\",\n    \"title\": \"\"\n  },\n  \"status\": \"{{oneOf (array 'queued' 'processing' 'failed' 'successful')}}\",\n  \"uri\": \"\"\n}",
          "latency": 0,
          "statusCode": 202,
          "label": "The accepted batch information that is queued for processing.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "d293aaec-6ea4-4964-b3b0-d7568581904b",
      "documentation": "Get an EPG batch operation.",
      "method": "get",
      "endpoint": "api/v2/metapub/program-information/batch/{batch-id}",
      "responses": [
        {
          "uuid": "7b58e31b-afa9-487d-b8e0-eca2666f9cd8",
          "body": "{\n  \"createdDate\": \"\",\n  \"finishedDate\": \"\",\n  \"format\": \"{{oneOf (array 'radiodns')}}\",\n  \"id\": {{faker 'datatype.number'}},\n  \"message\": \"\",\n  \"name\": \"\",\n  \"program\": {\n    \"airDate\": \"\",\n    \"title\": \"\"\n  },\n  \"status\": \"{{oneOf (array 'queued' 'processing' 'failed' 'successful')}}\",\n  \"uri\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "The batch information.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "8368cd32-a93e-4427-9f57-2bc74a34be2a",
          "body": "",
          "latency": 0,
          "statusCode": 403,
          "label": "Authorization failed, Username or password not found or incorrect.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "8729e2de-54cd-456c-b4c9-b558d3ed6929",
          "body": "",
          "latency": 0,
          "statusCode": 404,
          "label": "The batch is not found.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "11803ae5-dfc1-4937-901b-dda1e43f7dd9",
      "documentation": "Get the group information document.",
      "method": "get",
      "endpoint": "radiodns/spi/3.1/GI.xml",
      "responses": [
        {
          "uuid": "bb182cb2-5421-4dd3-a4ed-5babb0092ac3",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "The group information document is returned in the body of the response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/xml"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "7845713e-5f5b-487e-8dc8-4d709529dd20",
      "documentation": "Get the service information document.",
      "method": "get",
      "endpoint": "radiodns/spi/3.1/SI.xml",
      "responses": [
        {
          "uuid": "3971de19-b2e9-46d1-98e3-db1148559554",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "The service information document is returned in the body of the response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/xml"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "c6ad688c-7467-4e09-ab2b-027603dff218",
      "documentation": "Get the program information document.",
      "method": "get",
      "endpoint": "radiodns/spi/3.1/id/:fqdn/:sid/:date_PI.xml",
      "responses": [
        {
          "uuid": "22eda784-8fb4-4c7d-b7f0-c38a4518c846",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "Program information document for the given 24 hour period.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/xml"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "e791572f-f540-4e1c-9a05-8541d7679c0e",
          "body": "",
          "latency": 0,
          "statusCode": 403,
          "label": "Authorization failed, the client Id is incorrect.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/xml"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "c71ababe-303c-4014-9879-fce420bc03c1",
          "body": "",
          "latency": 0,
          "statusCode": 404,
          "label": "The program information for the requested day or service cannot be found.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/xml"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "data": []
}