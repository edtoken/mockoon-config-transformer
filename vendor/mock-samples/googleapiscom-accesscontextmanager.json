{
  "uuid": "ca75c742-67f0-4ecc-84b2-62294b00a511",
  "lastMigration": 24,
  "name": "Access Context Manager API",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3000,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "77313a0d-7e87-4b70-8b27-ca73bcb1a1d4",
      "documentation": "List all AccessPolicies under a container.",
      "method": "get",
      "endpoint": "v1beta/accessPolicies",
      "responses": [
        {
          "uuid": "aec1d999-383d-4a94-b61f-4c71440be8a0",
          "body": "{\n  \"accessPolicies\": [\n    {\n      \"name\": \"\",\n      \"parent\": \"\",\n      \"title\": \"\"\n    }\n  ],\n  \"nextPageToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "2d15d7f5-4d06-41fa-a026-0f01ad4d3710",
      "documentation": "Create an `AccessPolicy`. Fails if this organization already has a `AccessPolicy`. The longrunning Operation will have a successful status once the `AccessPolicy` has propagated to long-lasting storage. Syntactic and basic semantic errors will be returned in `metadata` as a BadRequest proto.",
      "method": "post",
      "endpoint": "v1beta/accessPolicies",
      "responses": [
        {
          "uuid": "af15c9d3-af08-4348-aaf7-e2e8dd9505c0",
          "body": "{\n  \"done\": {{faker 'datatype.boolean'}},\n  \"error\": {\n    \"code\": {{faker 'datatype.number'}},\n    \"details\": [\n      {}\n    ],\n    \"message\": \"\"\n  },\n  \"metadata\": {},\n  \"name\": \"\",\n  \"response\": {}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "1bb9c1e5-76c6-44df-83a5-f07af361b1c4",
      "documentation": "Delete a Service Perimeter by resource name. The longrunning operation from this RPC will have a successful status once the Service Perimeter has been removed from long-lasting storage.",
      "method": "delete",
      "endpoint": "v1beta/:name",
      "responses": [
        {
          "uuid": "6fe98c61-7de7-4583-a2cc-56ea4e91bbdf",
          "body": "{\n  \"done\": {{faker 'datatype.boolean'}},\n  \"error\": {\n    \"code\": {{faker 'datatype.number'}},\n    \"details\": [\n      {}\n    ],\n    \"message\": \"\"\n  },\n  \"metadata\": {},\n  \"name\": \"\",\n  \"response\": {}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "117b00dd-b228-402a-a926-81edc8d10035",
      "documentation": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
      "method": "get",
      "endpoint": "v1beta/:name",
      "responses": [
        {
          "uuid": "83143886-a778-4604-9333-60a917c2b5f3",
          "body": "{\n  \"done\": {{faker 'datatype.boolean'}},\n  \"error\": {\n    \"code\": {{faker 'datatype.number'}},\n    \"details\": [\n      {}\n    ],\n    \"message\": \"\"\n  },\n  \"metadata\": {},\n  \"name\": \"\",\n  \"response\": {}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "84959a8e-021e-4ef7-b266-0ac4518d0b4b",
      "documentation": "Update a Service Perimeter. The longrunning operation from this RPC will have a successful status once the changes to the Service Perimeter have propagated to long-lasting storage. Service Perimeter containing errors will result in an error response for the first error encountered.",
      "method": "patch",
      "endpoint": "v1beta/:name",
      "responses": [
        {
          "uuid": "362ade72-5550-4673-80bf-254e8df86e71",
          "body": "{\n  \"done\": {{faker 'datatype.boolean'}},\n  \"error\": {\n    \"code\": {{faker 'datatype.number'}},\n    \"details\": [\n      {}\n    ],\n    \"message\": \"\"\n  },\n  \"metadata\": {},\n  \"name\": \"\",\n  \"response\": {}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "427b5579-4664-4758-b6f5-dfc06dbaa68a",
      "documentation": "List all Access Levels for an access policy.",
      "method": "get",
      "endpoint": "v1beta/:parent/accessLevels",
      "responses": [
        {
          "uuid": "c7ab1031-baf6-4390-9bdc-1e73af067769",
          "body": "{\n  \"accessLevels\": [\n    {\n      \"basic\": {\n        \"combiningFunction\": \"{{oneOf (array 'AND' 'OR')}}\",\n        \"conditions\": [\n          {\n            \"devicePolicy\": {\n              \"allowedDeviceManagementLevels\": [\n                \"{{oneOf (array 'MANAGEMENT_UNSPECIFIED' 'NONE' 'BASIC' 'COMPLETE')}}\"\n              ],\n              \"allowedEncryptionStatuses\": [\n                \"{{oneOf (array 'ENCRYPTION_UNSPECIFIED' 'ENCRYPTION_UNSUPPORTED' 'UNENCRYPTED' 'ENCRYPTED')}}\"\n              ],\n              \"osConstraints\": [\n                {\n                  \"minimumVersion\": \"\",\n                  \"osType\": \"{{oneOf (array 'OS_UNSPECIFIED' 'DESKTOP_MAC' 'DESKTOP_WINDOWS' 'DESKTOP_LINUX' 'DESKTOP_CHROME_OS' 'ANDROID' 'IOS')}}\",\n                  \"requireVerifiedChromeOs\": {{faker 'datatype.boolean'}}\n                }\n              ],\n              \"requireAdminApproval\": {{faker 'datatype.boolean'}},\n              \"requireCorpOwned\": {{faker 'datatype.boolean'}},\n              \"requireScreenlock\": {{faker 'datatype.boolean'}}\n            },\n            \"ipSubnetworks\": [\n              \"\"\n            ],\n            \"members\": [\n              \"\"\n            ],\n            \"negate\": {{faker 'datatype.boolean'}},\n            \"regions\": [\n              \"\"\n            ],\n            \"requiredAccessLevels\": [\n              \"\"\n            ]\n          }\n        ]\n      },\n      \"custom\": {\n        \"expr\": {\n          \"description\": \"\",\n          \"expression\": \"\",\n          \"location\": \"\",\n          \"title\": \"\"\n        }\n      },\n      \"description\": \"\",\n      \"name\": \"\",\n      \"title\": \"\"\n    }\n  ],\n  \"nextPageToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "a32b14d0-8c1a-4eb4-badf-e303b6a2be07",
      "documentation": "Create an Access Level. The longrunning operation from this RPC will have a successful status once the Access Level has propagated to long-lasting storage. Access Levels containing errors will result in an error response for the first error encountered.",
      "method": "post",
      "endpoint": "v1beta/:parent/accessLevels",
      "responses": [
        {
          "uuid": "47e55ae5-54fd-43f3-8e3e-347ad32470ef",
          "body": "{\n  \"done\": {{faker 'datatype.boolean'}},\n  \"error\": {\n    \"code\": {{faker 'datatype.number'}},\n    \"details\": [\n      {}\n    ],\n    \"message\": \"\"\n  },\n  \"metadata\": {},\n  \"name\": \"\",\n  \"response\": {}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "2c2f3523-49f9-4f63-9a80-6f6b9d424942",
      "documentation": "List all Service Perimeters for an access policy.",
      "method": "get",
      "endpoint": "v1beta/:parent/servicePerimeters",
      "responses": [
        {
          "uuid": "e18d4d39-0502-4a97-82af-48df9ebea19e",
          "body": "{\n  \"nextPageToken\": \"\",\n  \"servicePerimeters\": [\n    {\n      \"description\": \"\",\n      \"name\": \"\",\n      \"perimeterType\": \"{{oneOf (array 'PERIMETER_TYPE_REGULAR' 'PERIMETER_TYPE_BRIDGE')}}\",\n      \"status\": {\n        \"accessLevels\": [\n          \"\"\n        ],\n        \"resources\": [\n          \"\"\n        ],\n        \"restrictedServices\": [\n          \"\"\n        ],\n        \"unrestrictedServices\": [\n          \"\"\n        ],\n        \"vpcAccessibleServices\": {\n          \"allowedServices\": [\n            \"\"\n          ],\n          \"enableRestriction\": {{faker 'datatype.boolean'}}\n        }\n      },\n      \"title\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "869feaef-172d-4e8e-88ca-ff2a2c5c596b",
      "documentation": "Create a Service Perimeter. The longrunning operation from this RPC will have a successful status once the Service Perimeter has propagated to long-lasting storage. Service Perimeters containing errors will result in an error response for the first error encountered.",
      "method": "post",
      "endpoint": "v1beta/:parent/servicePerimeters",
      "responses": [
        {
          "uuid": "6783e6b8-2585-4b90-befe-a875e79c6917",
          "body": "{\n  \"done\": {{faker 'datatype.boolean'}},\n  \"error\": {\n    \"code\": {{faker 'datatype.number'}},\n    \"details\": [\n      {}\n    ],\n    \"message\": \"\"\n  },\n  \"metadata\": {},\n  \"name\": \"\",\n  \"response\": {}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Successful response",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        }
      ],
      "enabled": true,
      "responseMode": null
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "data": []
}