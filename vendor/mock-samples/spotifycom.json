{
  "uuid": "2b0da85e-7bcd-46a7-9c04-2116738d37f5",
  "lastMigration": 24,
  "name": "Spotify Web API",
  "endpointPrefix": "v1",
  "latency": 0,
  "port": 3000,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "1e92851a-74ea-405d-bef6-c062a5fb4130",
      "documentation": "Get Multiple Albums",
      "method": "get",
      "endpoint": "albums",
      "responses": [
        {
          "uuid": "51a7d3ad-730c-404a-bced-4e943d7a563d",
          "body": "{\n  \"albums\": [\n    {\n      \"album_type\": \"\",\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'datatype.number'}}\n          },\n          \"genres\": [\n            \"\"\n          ],\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'datatype.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'datatype.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"popularity\": {{faker 'datatype.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"copyrights\": [\n        {\n          \"text\": \"\",\n          \"type\": \"\"\n        }\n      ],\n      \"external_ids\": {\n        \"ean\": \"\",\n        \"isrc\": \"\",\n        \"upc\": \"\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'datatype.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"label\": \"\",\n      \"name\": \"\",\n      \"popularity\": {{faker 'datatype.number'}},\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"total_tracks\": {{faker 'datatype.number'}},\n      \"tracks\": {\n        \"href\": \"\",\n        \"items\": [\n          {\n            \"artists\": [\n              {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"name\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              }\n            ],\n            \"available_markets\": [\n              \"\"\n            ],\n            \"disc_number\": {{faker 'datatype.number'}},\n            \"duration_ms\": {{faker 'datatype.number'}},\n            \"explicit\": {{faker 'datatype.boolean'}},\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"is_local\": {{faker 'datatype.boolean'}},\n            \"is_playable\": {{faker 'datatype.boolean'}},\n            \"linked_from\": {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"type\": \"\",\n              \"uri\": \"\"\n            },\n            \"name\": \"\",\n            \"preview_url\": \"\",\n            \"restrictions\": {\n              \"reason\": \"\"\n            },\n            \"track_number\": {{faker 'datatype.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"limit\": {{faker 'datatype.number'}},\n        \"next\": \"\",\n        \"offset\": {{faker 'datatype.number'}},\n        \"previous\": \"\",\n        \"total\": {{faker 'datatype.number'}}\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"albums\"` and whose value is an array of [album objects](https://developer.spotify.com/documentation/web-api/reference/#object-albumobject) in JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "2ce7b7c4-6a7a-4061-b0fa-c95185514775",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "4429e6f1-518d-4a70-8a46-17cfa463f108",
      "documentation": "Get an Album",
      "method": "get",
      "endpoint": "albums/:id",
      "responses": [
        {
          "uuid": "fe78acf8-fcaf-487c-9d4a-59aa880bdc91",
          "body": "{\n  \"album_type\": \"\",\n  \"artists\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'datatype.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'datatype.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'datatype.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"available_markets\": [\n    \"\"\n  ],\n  \"copyrights\": [\n    {\n      \"text\": \"\",\n      \"type\": \"\"\n    }\n  ],\n  \"external_ids\": {\n    \"ean\": \"\",\n    \"isrc\": \"\",\n    \"upc\": \"\"\n  },\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"genres\": [\n    \"\"\n  ],\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'datatype.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'datatype.number'}}\n    }\n  ],\n  \"label\": \"\",\n  \"name\": \"\",\n  \"popularity\": {{faker 'datatype.number'}},\n  \"release_date\": \"\",\n  \"release_date_precision\": \"\",\n  \"restrictions\": {\n    \"reason\": \"\"\n  },\n  \"total_tracks\": {{faker 'datatype.number'}},\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'datatype.number'}},\n        \"duration_ms\": {{faker 'datatype.number'}},\n        \"explicit\": {{faker 'datatype.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'datatype.boolean'}},\n        \"is_playable\": {{faker 'datatype.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'datatype.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is 200 OK and the response body contains an album object in JSON format. On error, the header status code is an error code and the response body contains an error object.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "0c2f7cfe-0239-4028-a911-7e5dbc76bb85",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "c92028a7-412a-4996-9ede-697072764d1c",
      "documentation": "Get an Album's Tracks",
      "method": "get",
      "endpoint": "albums/:id/tracks",
      "responses": [
        {
          "uuid": "252cb13f-1c0a-49ae-b68d-4efcfb2e9798",
          "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"name\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"disc_number\": {{faker 'datatype.number'}},\n      \"duration_ms\": {{faker 'datatype.number'}},\n      \"explicit\": {{faker 'datatype.boolean'}},\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"is_local\": {{faker 'datatype.boolean'}},\n      \"is_playable\": {{faker 'datatype.boolean'}},\n      \"linked_from\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"name\": \"\",\n      \"preview_url\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"track_number\": {{faker 'datatype.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'datatype.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'datatype.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is 200 OK and the response body contains an album object in JSON format. On error, the header status code is an error code and the response body contains an error object.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "63b4eb8f-971e-4379-9012-dbaec41a015d",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "bc01d921-3884-4efc-8ba6-1de3833b7fd7",
      "documentation": "Get Multiple Artists",
      "method": "get",
      "endpoint": "artists",
      "responses": [
        {
          "uuid": "073f88a3-ae23-43b2-915b-ec9f86c21dd1",
          "body": "{\n  \"artists\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'datatype.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'datatype.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'datatype.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"artists\"` and whose value is an array of [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) in JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "f1ce81b9-a148-464a-b086-9fc6f75142d6",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "5d9591ae-78d8-4579-afde-49e6ad90e573",
      "documentation": "Get an Artist",
      "method": "get",
      "endpoint": "artists/:id",
      "responses": [
        {
          "uuid": "cf7a2b1f-e3ac-449d-b08f-668c7fef5265",
          "body": "{\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"genres\": [\n    \"\"\n  ],\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'datatype.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'datatype.number'}}\n    }\n  ],\n  \"name\": \"\",\n  \"popularity\": {{faker 'datatype.number'}},\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an [artist object](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "594c4cb7-fe86-4192-8249-ba02621f4ab9",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "14b45bbb-b6ef-4a3d-add5-a2e0e6436432",
      "documentation": "Get an Artist's Albums",
      "method": "get",
      "endpoint": "artists/:id/albums",
      "responses": [
        {
          "uuid": "0a3fc8b0-3eb9-436b-bf0b-206398f356ba",
          "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"album_group\": \"\",\n      \"album_type\": \"\",\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"name\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'datatype.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"total_tracks\": {{faker 'datatype.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'datatype.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'datatype.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "3836db38-0bdb-4522-a834-b00c2583fa3d",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "a84fa01f-ee7f-4a9e-9a3d-73094361e103",
      "documentation": "Get an Artist's Related Artists",
      "method": "get",
      "endpoint": "artists/:id/related-artists",
      "responses": [
        {
          "uuid": "ffb9e348-1deb-463f-b40f-67d257178f10",
          "body": "{\n  \"artists\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'datatype.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'datatype.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'datatype.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"artists\"` and whose value is an array of up to 20 [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "b60d861a-2ea1-4343-9399-9f0079ad5319",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "aad9d769-b710-4a62-89f5-11bcbb867991",
      "documentation": "Get an Artist's Top Tracks",
      "method": "get",
      "endpoint": "artists/:id/top-tracks",
      "responses": [
        {
          "uuid": "9a922682-31a0-4bae-beb8-aba602de07b7",
          "body": "{\n  \"tracks\": [\n    {\n      \"album\": {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'datatype.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'datatype.number'}}\n          },\n          \"genres\": [\n            \"\"\n          ],\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'datatype.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'datatype.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"popularity\": {{faker 'datatype.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"disc_number\": {{faker 'datatype.number'}},\n      \"duration_ms\": {{faker 'datatype.number'}},\n      \"explicit\": {{faker 'datatype.boolean'}},\n      \"external_ids\": {\n        \"ean\": \"\",\n        \"isrc\": \"\",\n        \"upc\": \"\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"is_local\": {{faker 'datatype.boolean'}},\n      \"is_playable\": {{faker 'datatype.boolean'}},\n      \"linked_from\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"name\": \"\",\n      \"popularity\": {{faker 'datatype.number'}},\n      \"preview_url\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"track_number\": {{faker 'datatype.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object whose key is `\"tracks\"` and whose value is an array of up to 10 [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "0a841cf3-d4e5-4b8c-bb12-fa45a86b26fb",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "af7df8f2-e32e-46d3-b718-8eadf3c15cc5",
      "documentation": "Get Audio Analysis for a Track",
      "method": "get",
      "endpoint": "audio-analysis/:id",
      "responses": [
        {
          "uuid": "38725705-48e4-44a4-8b59-69d225337b06",
          "body": "{\n  \"bars\": [\n    {\n      \"confidence\": {{faker 'datatype.number'}},\n      \"duration\": {{faker 'datatype.number'}},\n      \"start\": {{faker 'datatype.number'}}\n    }\n  ],\n  \"beats\": [\n    {\n      \"confidence\": {{faker 'datatype.number'}},\n      \"duration\": {{faker 'datatype.number'}},\n      \"start\": {{faker 'datatype.number'}}\n    }\n  ],\n  \"sections\": [\n    {\n      \"confidence\": {{faker 'datatype.number'}},\n      \"duration\": {{faker 'datatype.number'}},\n      \"key\": {{faker 'datatype.number'}},\n      \"key_confidence\": {{faker 'datatype.number'}},\n      \"loudness\": {{faker 'datatype.number'}},\n      \"mode\": {{faker 'datatype.number'}},\n      \"mode_confidence\": {{faker 'datatype.number'}},\n      \"start\": {{faker 'datatype.number'}},\n      \"tempo\": {{faker 'datatype.number'}},\n      \"tempo_confidence\": {{faker 'datatype.number'}},\n      \"time_signature\": {{faker 'datatype.number'}},\n      \"time_signature_confidence\": {{faker 'datatype.number'}}\n    }\n  ],\n  \"segments\": [\n    {\n      \"confidence\": {{faker 'datatype.number'}},\n      \"duration\": {{faker 'datatype.number'}},\n      \"loudness_end\": {{faker 'datatype.number'}},\n      \"loudness_max\": {{faker 'datatype.number'}},\n      \"loudness_max_time\": {{faker 'datatype.number'}},\n      \"loudness_start\": {{faker 'datatype.number'}},\n      \"pitches\": [\n        {{faker 'datatype.number'}}\n      ],\n      \"start\": {{faker 'datatype.number'}},\n      \"timbre\": [\n        {{faker 'datatype.number'}}\n      ]\n    }\n  ],\n  \"tatums\": [\n    {\n      \"confidence\": {{faker 'datatype.number'}},\n      \"duration\": {{faker 'datatype.number'}},\n      \"start\": {{faker 'datatype.number'}}\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains an audio analysis object in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "a61cc876-0984-41f5-a9c8-d77caa167bc5",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "30836e6b-be5a-4762-af1b-ac8f1cab7312",
      "documentation": "Get Audio Features for Several Tracks",
      "method": "get",
      "endpoint": "audio-features",
      "responses": [
        {
          "uuid": "10426f9f-a2ea-491d-ad7e-0ef91e19d4f7",
          "body": "{\n  \"audio_features\": [\n    {\n      \"acousticness\": {{faker 'datatype.number'}},\n      \"analysis_url\": \"\",\n      \"danceability\": {{faker 'datatype.number'}},\n      \"duration_ms\": {{faker 'datatype.number'}},\n      \"energy\": {{faker 'datatype.number'}},\n      \"id\": \"\",\n      \"instrumentalness\": {{faker 'datatype.number'}},\n      \"key\": {{faker 'datatype.number'}},\n      \"liveness\": {{faker 'datatype.number'}},\n      \"loudness\": {{faker 'datatype.number'}},\n      \"mode\": {{faker 'datatype.number'}},\n      \"speechiness\": {{faker 'datatype.number'}},\n      \"tempo\": {{faker 'datatype.number'}},\n      \"time_signature\": {{faker 'datatype.number'}},\n      \"track_href\": \"\",\n      \"type\": \"\",\n      \"uri\": \"\",\n      \"valence\": {{faker 'datatype.number'}}\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200 OK`\nand the response body contains an object whose key is `\"audio_features\"` and\nwhose value is an array of audio features objects in JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "22d859c7-b462-41a6-8897-9abcb1f7d68f",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "51eb4b57-3aa3-4fe8-ac9a-cd9657c4f464",
      "documentation": "Get Audio Features for a Track",
      "method": "get",
      "endpoint": "audio-features/:id",
      "responses": [
        {
          "uuid": "44116836-0cca-49de-a23f-ffe1dcaefe51",
          "body": "{\n  \"acousticness\": {{faker 'datatype.number'}},\n  \"analysis_url\": \"\",\n  \"danceability\": {{faker 'datatype.number'}},\n  \"duration_ms\": {{faker 'datatype.number'}},\n  \"energy\": {{faker 'datatype.number'}},\n  \"id\": \"\",\n  \"instrumentalness\": {{faker 'datatype.number'}},\n  \"key\": {{faker 'datatype.number'}},\n  \"liveness\": {{faker 'datatype.number'}},\n  \"loudness\": {{faker 'datatype.number'}},\n  \"mode\": {{faker 'datatype.number'}},\n  \"speechiness\": {{faker 'datatype.number'}},\n  \"tempo\": {{faker 'datatype.number'}},\n  \"time_signature\": {{faker 'datatype.number'}},\n  \"track_href\": \"\",\n  \"type\": \"\",\n  \"uri\": \"\",\n  \"valence\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains an [audio features object](https://developer.spotify.com/documentation/web-api/reference/#object-audiofeaturesobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "061619e8-2e93-43bb-87c2-3c90384234b9",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "04389508-4068-45c5-aae9-be1ba315594b",
      "documentation": "Get All Categories",
      "method": "get",
      "endpoint": "browse/categories",
      "responses": [
        {
          "uuid": "7e0cac92-77e8-402a-99b3-7072357e8c21",
          "body": "{\n  \"categories\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"href\": \"\",\n        \"icons\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"id\": \"\",\n        \"name\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an object with a `categories` field, with an array of [category objects](#categoryobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the list, you can use [Get a Category](https://developer.spotify.com/web-api/get-category/) to drill down further.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "93507e0b-2695-49ea-8857-4467826b0318",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "d237c81e-b718-4ac2-ab52-261b587f81a9",
      "documentation": "Get a Category",
      "method": "get",
      "endpoint": "browse/categories/:category_id",
      "responses": [
        {
          "uuid": "12058455-3132-4e4b-b6d0-329a2370018e",
          "body": "{\n  \"href\": \"\",\n  \"icons\": [\n    {\n      \"height\": {{faker 'datatype.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'datatype.number'}}\n    }\n  ],\n  \"id\": \"\",\n  \"name\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a [category object](#categoryobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the category, you can use [Get a Category's Playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) to drill down further.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "b6ff9aee-626b-41d4-b69a-5226ecd91007",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "df2735d9-416b-4603-815c-2f1007ef053c",
      "documentation": "Get a Category's Playlists",
      "method": "get",
      "endpoint": "browse/categories/:category_id/playlists",
      "responses": [
        {
          "uuid": "07718daa-ff9f-479c-8cc7-f9350b113c4a",
          "body": "{\n  \"playlists\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"collaborative\": {{faker 'datatype.boolean'}},\n        \"description\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"owner\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'datatype.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'datatype.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'datatype.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"public\": {{faker 'datatype.boolean'}},\n        \"snapshot_id\": \"\",\n        \"tracks\": {\n          \"href\": \"\",\n          \"total\": {{faker 'datatype.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the list, you can use [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) and [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) to drill down further.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "5639bf66-c10b-4686-a6dc-f080214b0165",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "cf929f96-6f18-4fd6-a4a9-4861348e587d",
      "documentation": "Get All Featured Playlists",
      "method": "get",
      "endpoint": "browse/featured-playlists",
      "responses": [
        {
          "uuid": "3708dd7b-5709-432c-90b4-94b4cd72197c",
          "body": "{\n  \"message\": \"\",\n  \"playlists\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"collaborative\": {{faker 'datatype.boolean'}},\n        \"description\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"owner\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'datatype.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'datatype.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'datatype.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"public\": {{faker 'datatype.boolean'}},\n        \"snapshot_id\": \"\",\n        \"tracks\": {\n          \"href\": \"\",\n          \"total\": {{faker 'datatype.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a `message` and a `playlists` object. The `playlists` object contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the list of playlist objects, you can use [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) and [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) to drill down further.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "afba5595-6383-47fb-b2a7-1855fa89a018",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "4c8fed88-3da0-42a5-846e-e8518e679a9e",
      "documentation": "Get All New Releases",
      "method": "get",
      "endpoint": "browse/new-releases",
      "responses": [
        {
          "uuid": "ed27e1a0-856d-428a-a466-5115594d802b",
          "body": "{\n  \"albums\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'datatype.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a `message` and an`albums` object. The `albums` object contains an array of simplified [album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nOnce you have retrieved the list, you can use [Get an Album's Tracks](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-albums-tracks) to drill down further.\n\nThe results are returned in an order reflected within the Spotify clients, and therefore may not be ordered by date.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "d919406e-55af-4c67-a30c-101d5d0f18ff",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "ea11dbd5-b787-4740-a672-552623d96af0",
      "documentation": "Get Multiple Episodes",
      "method": "get",
      "endpoint": "episodes",
      "responses": [
        {
          "uuid": "569f1447-965a-4bc7-aa79-7ab3312eef76",
          "body": "{\n  \"episodes\": [\n    {\n      \"audio_preview_url\": \"\",\n      \"description\": \"\",\n      \"duration_ms\": {{faker 'datatype.number'}},\n      \"explicit\": {{faker 'datatype.boolean'}},\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"html_description\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'datatype.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"is_externally_hosted\": {{faker 'datatype.boolean'}},\n      \"is_playable\": {{faker 'datatype.boolean'}},\n      \"language\": \"\",\n      \"languages\": [\n        \"\"\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"resume_point\": {\n        \"fully_played\": {{faker 'datatype.boolean'}},\n        \"resume_position_ms\": {{faker 'datatype.number'}}\n      },\n      \"show\": {\n        \"available_markets\": [\n          \"\"\n        ],\n        \"copyrights\": [\n          {\n            \"text\": \"\",\n            \"type\": \"\"\n          }\n        ],\n        \"description\": \"\",\n        \"explicit\": {{faker 'datatype.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'datatype.boolean'}},\n        \"languages\": [\n          \"\"\n        ],\n        \"media_type\": \"\",\n        \"name\": \"\",\n        \"publisher\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains an object whose key is `episodes` and whose\nvalue is an array of [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject)\nin JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position.\nDuplicate `ids` in the query will result in duplicate objects in the response. If an episode is unavailable in the given `market`, a `null` value is returned.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "b4819bdd-3d6a-4871-b71a-63a73f6f12b5",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "f9e3aef9-5d1e-4eaa-9589-236b5864f96b",
      "documentation": "Get an Episode",
      "method": "get",
      "endpoint": "episodes/:id",
      "responses": [
        {
          "uuid": "701eb1aa-cd93-4e5b-8b80-40af564de1ff",
          "body": "{\n  \"audio_preview_url\": \"\",\n  \"description\": \"\",\n  \"duration_ms\": {{faker 'datatype.number'}},\n  \"explicit\": {{faker 'datatype.boolean'}},\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"href\": \"\",\n  \"html_description\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'datatype.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'datatype.number'}}\n    }\n  ],\n  \"is_externally_hosted\": {{faker 'datatype.boolean'}},\n  \"is_playable\": {{faker 'datatype.boolean'}},\n  \"language\": \"\",\n  \"languages\": [\n    \"\"\n  ],\n  \"name\": \"\",\n  \"release_date\": \"\",\n  \"release_date_precision\": \"\",\n  \"restrictions\": {\n    \"reason\": \"\"\n  },\n  \"resume_point\": {\n    \"fully_played\": {{faker 'datatype.boolean'}},\n    \"resume_position_ms\": {{faker 'datatype.number'}}\n  },\n  \"show\": {\n    \"available_markets\": [\n      \"\"\n    ],\n    \"copyrights\": [\n      {\n        \"text\": \"\",\n        \"type\": \"\"\n      }\n    ],\n    \"description\": \"\",\n    \"explicit\": {{faker 'datatype.boolean'}},\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"html_description\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'datatype.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"is_externally_hosted\": {{faker 'datatype.boolean'}},\n    \"languages\": [\n      \"\"\n    ],\n    \"media_type\": \"\",\n    \"name\": \"\",\n    \"publisher\": \"\",\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains an [episode object](https://developer.spotify.com/documentation/web-api/reference/#object-episodeobject)\nin JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\nand the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).  \n\nIf an episode is unavailable in the given `market` the HTTP status code in the response header is `404` NOT FOUND.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "6aedc131-a40a-492e-91ad-7edb3eaa6017",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "64e68a12-89f1-45f1-941d-d0f173e0dc3c",
      "documentation": "Get Available Markets",
      "method": "get",
      "endpoint": "markets",
      "responses": [
        {
          "uuid": "12de6acd-aba0-46a0-9fa0-d92f55f7add6",
          "body": "{\n  \"markets\": [\n    \"\"\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is 200 OK and the response body contains a list of the countries in which Spotify is available, identified by their [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) with additional country codes for special territories. On error, the header status code is an error code and the response body contains an error object.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "120e8b07-7696-4d72-9a12-c28a00de23d6",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "44d00b4d-8a76-492b-bb0b-e8222647ad0f",
      "documentation": "Get Current User's Profile",
      "method": "get",
      "endpoint": "me",
      "responses": [
        {
          "uuid": "518310ad-d106-48b9-9114-d74424dc6469",
          "body": "{\n  \"country\": \"\",\n  \"display_name\": \"\",\n  \"email\": \"\",\n  \"explicit_content\": {\n    \"filter_enabled\": {{faker 'datatype.boolean'}},\n    \"filter_locked\": {{faker 'datatype.boolean'}}\n  },\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'datatype.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'datatype.number'}}\n    }\n  ],\n  \"product\": \"\",\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a [user object](https://developer.spotify.com/documentation/web-api/reference/#object-privateuserobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). When requesting fields that you don't have the user's authorization to access, it will return error `403` Forbidden.\n\n**Important!** If the `user-read-email` scope is authorized, the returned JSON will include the email address that was entered when the user created their Spotify account. **This email address is unverified**; do not assume that the email address belongs to the user.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "54dd9490-2ff4-43e8-a579-df5638539f01",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "f28f935e-ed5d-4091-b875-e3998e5d6e95",
      "documentation": "Remove Albums for Current User",
      "method": "delete",
      "endpoint": "me/albums",
      "responses": [
        {
          "uuid": "b55a6dc4-148e-4322-b5ba-eb0b01942f91",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to remove an album when you do not have the user's authorization returns error `403` Forbidden.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "87c48ca1-9955-4a50-9967-c2e84e93a1b8",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "38f0574a-14c0-412d-a306-882084f0712a",
      "documentation": "Get User's Saved Albums",
      "method": "get",
      "endpoint": "me/albums",
      "responses": [
        {
          "uuid": "112e8ebb-5011-4a88-bc2f-ad8a89250317",
          "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"album\": {\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"followers\": {\n              \"href\": \"\",\n              \"total\": {{faker 'datatype.number'}}\n            },\n            \"genres\": [\n              \"\"\n            ],\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'datatype.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'datatype.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"popularity\": {{faker 'datatype.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"copyrights\": [\n          {\n            \"text\": \"\",\n            \"type\": \"\"\n          }\n        ],\n        \"external_ids\": {\n          \"ean\": \"\",\n          \"isrc\": \"\",\n          \"upc\": \"\"\n        },\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"label\": \"\",\n        \"name\": \"\",\n        \"popularity\": {{faker 'datatype.number'}},\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'datatype.number'}},\n        \"tracks\": {\n          \"href\": \"\",\n          \"items\": [\n            {\n              \"artists\": [\n                {\n                  \"external_urls\": {\n                    \"spotify\": \"\"\n                  },\n                  \"href\": \"\",\n                  \"id\": \"\",\n                  \"name\": \"\",\n                  \"type\": \"\",\n                  \"uri\": \"\"\n                }\n              ],\n              \"available_markets\": [\n                \"\"\n              ],\n              \"disc_number\": {{faker 'datatype.number'}},\n              \"duration_ms\": {{faker 'datatype.number'}},\n              \"explicit\": {{faker 'datatype.boolean'}},\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"is_local\": {{faker 'datatype.boolean'}},\n              \"is_playable\": {{faker 'datatype.boolean'}},\n              \"linked_from\": {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              },\n              \"name\": \"\",\n              \"preview_url\": \"\",\n              \"restrictions\": {\n                \"reason\": \"\"\n              },\n              \"track_number\": {{faker 'datatype.number'}},\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"limit\": {{faker 'datatype.number'}},\n          \"next\": \"\",\n          \"offset\": {{faker 'datatype.number'}},\n          \"previous\": \"\",\n          \"total\": {{faker 'datatype.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'datatype.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'datatype.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved album objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedalbumobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. Each album object is accompanied by a [timestamp](https://developer.spotify.com/documentation/web-api/#timestamps) (`added_at`) to show when it was added. There is also an **etag** in the header that can be used in future [conditional requests](https://developer.spotify.com/documentation/web-api/#conditional-requests).\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "ced61f01-59ef-440e-a4a8-b752ea13d9fa",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "a8f74d67-5974-4aba-b85b-d207a037b866",
      "documentation": "Save Albums for Current User",
      "method": "put",
      "endpoint": "me/albums",
      "responses": [
        {
          "uuid": "4bf2585d-a928-45ef-b716-eac79193e6d5",
          "body": "",
          "latency": 0,
          "statusCode": 201,
          "label": "On success, the HTTP status code in the response header is `201` Created. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to add an album when you do not have the user's authorization returns error `403` Forbidden.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "645edc8c-a0cb-4167-883b-469b7d9c6aba",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "be88bac7-5b39-4d1f-8b00-7185c76432e5",
      "documentation": "Check User's Saved Albums",
      "method": "get",
      "endpoint": "me/albums/contains",
      "responses": [
        {
          "uuid": "0c975dd4-73a0-46e6-8011-f08eea88b126",
          "body": "[\n  {{faker 'datatype.boolean'}}\n]",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "17164d79-3f75-4edc-9010-a13584e9d74a",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "4034ebf6-60ba-4b14-a0d2-82df11b398e3",
      "documentation": "Remove User's Saved Episodes",
      "method": "delete",
      "endpoint": "me/episodes",
      "responses": [
        {
          "uuid": "c65346a4-e98d-410b-8c14-8edb3d5d1507",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to remove an episode when you do not have the user's authorization returns error `403` Forbidden.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "13aab554-e3b4-4d96-aaa8-a01ea4fd39cb",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "592f69c4-9c63-40d2-9df0-477005320e46",
      "documentation": "Get User's Saved Episodes",
      "method": "get",
      "endpoint": "me/episodes",
      "responses": [
        {
          "uuid": "a5353878-dce6-445b-ba8d-1b902b4d0695",
          "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"episode\": {\n        \"audio_preview_url\": \"\",\n        \"description\": \"\",\n        \"duration_ms\": {{faker 'datatype.number'}},\n        \"explicit\": {{faker 'datatype.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'datatype.boolean'}},\n        \"is_playable\": {{faker 'datatype.boolean'}},\n        \"language\": \"\",\n        \"languages\": [\n          \"\"\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"resume_point\": {\n          \"fully_played\": {{faker 'datatype.boolean'}},\n          \"resume_position_ms\": {{faker 'datatype.number'}}\n        },\n        \"show\": {\n          \"available_markets\": [\n            \"\"\n          ],\n          \"copyrights\": [\n            {\n              \"text\": \"\",\n              \"type\": \"\"\n            }\n          ],\n          \"description\": \"\",\n          \"explicit\": {{faker 'datatype.boolean'}},\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"html_description\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'datatype.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'datatype.number'}}\n            }\n          ],\n          \"is_externally_hosted\": {{faker 'datatype.boolean'}},\n          \"languages\": [\n            \"\"\n          ],\n          \"media_type\": \"\",\n          \"name\": \"\",\n          \"publisher\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'datatype.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'datatype.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "- On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedepisodeobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "f67bd056-50ee-4140-b613-62c81b9aef25",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "fd2a066d-32b0-4522-8e5f-07f74836f5a6",
      "documentation": "Save Episodes for User",
      "method": "put",
      "endpoint": "me/episodes",
      "responses": [
        {
          "uuid": "b6cb2b37-2917-48c9-ba8c-16e974ea4743",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to add an episode when you do not have the user's authorization, returns error `403` Forbidden.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "8c9dcf7e-0f7b-4cd1-8271-943005a193ae",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "8f5c78ac-ad72-4cba-ada9-0fed4dc93618",
      "documentation": "Check User's Saved Episodes",
      "method": "get",
      "endpoint": "me/episodes/contains",
      "responses": [
        {
          "uuid": "ec77b5e6-50a0-4e90-9894-5d3b539e8cb3",
          "body": "[\n  {{faker 'datatype.boolean'}}\n]",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "1c6c906f-2c37-4d00-83a8-a88b36e5979c",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "c96401e1-a830-451f-a967-df463a145761",
      "documentation": "Unfollow Artists or Users",
      "method": "delete",
      "endpoint": "me/following",
      "responses": [
        {
          "uuid": "cc9a2337-76fc-47b4-8848-c1b7102c02b7",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "On success, the HTTP status code in the response header is `204` No Content and the response body is empty.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "bf387a12-a5fe-4c00-b594-0aa837e775ea",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "89a19f29-9718-45b9-b1d4-6c3cf082ebb9",
      "documentation": "Get User's Followed Artists",
      "method": "get",
      "endpoint": "me/following",
      "responses": [
        {
          "uuid": "f77ed938-dfc6-4fae-8156-8cf86c31a093",
          "body": "{\n  \"artists\": {\n    \"cursors\": {\n      \"after\": \"\"\n    },\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'datatype.number'}}\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"popularity\": {{faker 'datatype.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an `artists` object.\nThe `artists` object in turn contains a [cursor-based paging object](https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject) of [Artists](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject).\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "1eda58f5-d204-4864-96e3-ded261b35e32",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "839a67bb-a02b-4402-acaa-a2dd1f9994b3",
      "documentation": "Follow Artists or Users",
      "method": "put",
      "endpoint": "me/following",
      "responses": [
        {
          "uuid": "25865631-4d91-41fa-aaf5-247e7f491d2a",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "On success, the HTTP status code in the response header is `204` No Content and the response body is empty.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "75e2a945-09e5-403d-85e6-47df11566f5e",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "63833d7d-2f63-4f6a-a989-982e5cefc93a",
      "documentation": "Get Following State for Artists/Users",
      "method": "get",
      "endpoint": "me/following/contains",
      "responses": [
        {
          "uuid": "d2002d89-4980-4af7-9a69-9a2754b24f00",
          "body": "[\n  {{faker 'datatype.boolean'}}\n]",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "07b744a2-b725-4268-8e1f-b7240e377d5f",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "4fcda5ab-f11c-4ad2-8da6-87c6751c13af",
      "documentation": "Get Information About The User's Current Playback",
      "method": "get",
      "endpoint": "me/player",
      "responses": [
        {
          "uuid": "bbf7b28c-b265-4346-9c7b-993d207eecc2",
          "body": "{\n  \"actions\": {\n    \"interrupting_playback\": {{faker 'datatype.boolean'}},\n    \"pausing\": {{faker 'datatype.boolean'}},\n    \"resuming\": {{faker 'datatype.boolean'}},\n    \"seeking\": {{faker 'datatype.boolean'}},\n    \"skipping_next\": {{faker 'datatype.boolean'}},\n    \"skipping_prev\": {{faker 'datatype.boolean'}},\n    \"toggling_repeat_context\": {{faker 'datatype.boolean'}},\n    \"toggling_repeat_track\": {{faker 'datatype.boolean'}},\n    \"toggling_shuffle\": {{faker 'datatype.boolean'}},\n    \"transferring_playback\": {{faker 'datatype.boolean'}}\n  },\n  \"context\": {\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"currently_playing_type\": \"\",\n  \"device\": {\n    \"id\": \"\",\n    \"is_active\": {{faker 'datatype.boolean'}},\n    \"is_private_session\": {{faker 'datatype.boolean'}},\n    \"is_restricted\": {{faker 'datatype.boolean'}},\n    \"name\": \"\",\n    \"type\": \"\",\n    \"volume_percent\": {{faker 'datatype.number'}}\n  },\n  \"is_playing\": {{faker 'datatype.boolean'}},\n  \"item\": {\n    \"album\": {\n      \"album_group\": \"\",\n      \"album_type\": \"\",\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"name\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'datatype.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"total_tracks\": {{faker 'datatype.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    },\n    \"artists\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'datatype.number'}}\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"popularity\": {{faker 'datatype.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"available_markets\": [\n      \"\"\n    ],\n    \"disc_number\": {{faker 'datatype.number'}},\n    \"duration_ms\": {{faker 'datatype.number'}},\n    \"explicit\": {{faker 'datatype.boolean'}},\n    \"external_ids\": {\n      \"ean\": \"\",\n      \"isrc\": \"\",\n      \"upc\": \"\"\n    },\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"is_local\": {{faker 'datatype.boolean'}},\n    \"is_playable\": {{faker 'datatype.boolean'}},\n    \"linked_from\": {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"type\": \"\",\n      \"uri\": \"\"\n    },\n    \"name\": \"\",\n    \"popularity\": {{faker 'datatype.number'}},\n    \"preview_url\": \"\",\n    \"restrictions\": {\n      \"reason\": \"\"\n    },\n    \"track_number\": {{faker 'datatype.number'}},\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"progress_ms\": {{faker 'datatype.number'}},\n  \"repeat_state\": \"\",\n  \"shuffle_state\": \"\",\n  \"timestamp\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "A successful request will return a `200 OK` response code with a json payload that contains information about the current playback. The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.\nWhen no available devices are found, the request will return a `200 OK` response but with no data populated.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "5b062df6-8677-4165-b87f-0b9a3d9ba1a2",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "A successful request will return a `200 OK` response code with a json payload that contains information about the current playback. The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.\nWhen no available devices are found, the request will return a `200 OK` response but with no data populated.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "19adacb2-e477-47b9-a78a-4931da1a9ef0",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "f2e98635-7ea6-4ea7-9076-7305ecfdc9b1",
      "documentation": "Transfer a User's Playback",
      "method": "put",
      "endpoint": "me/player",
      "responses": [
        {
          "uuid": "8097639b-3aa7-4c08-bbfe-354094bbc412",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "f103aee4-c76e-4a21-ab52-407857144eff",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "a3014378-4102-4988-8b18-a3a619e0a6fb",
      "documentation": "Get the User's Currently Playing Track",
      "method": "get",
      "endpoint": "me/player/currently-playing",
      "responses": [
        {
          "uuid": "98156033-de41-403f-befd-8a143486c114",
          "body": "{\n  \"context\": {\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"currently_playing_type\": \"\",\n  \"is_playing\": {{faker 'datatype.boolean'}},\n  \"item\": {\n    \"album\": {\n      \"album_group\": \"\",\n      \"album_type\": \"\",\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"name\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'datatype.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"total_tracks\": {{faker 'datatype.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    },\n    \"artists\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'datatype.number'}}\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"popularity\": {{faker 'datatype.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"available_markets\": [\n      \"\"\n    ],\n    \"disc_number\": {{faker 'datatype.number'}},\n    \"duration_ms\": {{faker 'datatype.number'}},\n    \"explicit\": {{faker 'datatype.boolean'}},\n    \"external_ids\": {\n      \"ean\": \"\",\n      \"isrc\": \"\",\n      \"upc\": \"\"\n    },\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"is_local\": {{faker 'datatype.boolean'}},\n    \"is_playable\": {{faker 'datatype.boolean'}},\n    \"linked_from\": {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"type\": \"\",\n      \"uri\": \"\"\n    },\n    \"name\": \"\",\n    \"popularity\": {{faker 'datatype.number'}},\n    \"preview_url\": \"\",\n    \"restrictions\": {\n      \"reason\": \"\"\n    },\n    \"track_number\": {{faker 'datatype.number'}},\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"progress_ms\": {{faker 'datatype.number'}},\n  \"timestamp\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "A successful request will return a `200 OK` response code with a json payload that contains information about the currently playing track or episode and its context (see below). The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.\n\nWhen no available devices are found, the request will return a `200 OK` response but with no data populated.\n\nWhen no track is currently playing, the request will return a `204 NO CONTENT` response with no payload.\n\nIf private session is enabled the response will be a `204 NO CONTENT` with an empty payload.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "5212dbc7-a0d1-4b03-92f8-25e9ae28ee9d",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "A successful request will return a `200 OK` response code with a json payload that contains information about the currently playing track or episode and its context (see below). The information returned is for the last known state, which means an inactive device could be returned if it was the last one to execute playback.\n\nWhen no available devices are found, the request will return a `200 OK` response but with no data populated.\n\nWhen no track is currently playing, the request will return a `204 NO CONTENT` response with no payload.\n\nIf private session is enabled the response will be a `204 NO CONTENT` with an empty payload.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "7f959d80-c723-45b3-bfc9-aa151c34d3f6",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "19091d79-a040-4f2a-b1cb-af5eccb69e52",
      "documentation": "Get a User's Available Devices",
      "method": "get",
      "endpoint": "me/player/devices",
      "responses": [
        {
          "uuid": "dfe26056-07bf-4e55-bd3e-0536e0d9c5d1",
          "body": "{\n  \"devices\": [\n    {\n      \"id\": \"\",\n      \"is_active\": {{faker 'datatype.boolean'}},\n      \"is_private_session\": {{faker 'datatype.boolean'}},\n      \"is_restricted\": {{faker 'datatype.boolean'}},\n      \"name\": \"\",\n      \"type\": \"\",\n      \"volume_percent\": {{faker 'datatype.number'}}\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "A successful request will return a `200 OK` response code with a json payload that contains the device objects (see below).\nWhen no available devices are found, the request will return a 200 OK response with an empty devices list.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "47df3ca5-070f-4ca3-bc5d-cb2e58bc4f66",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "31f2affd-671f-4d79-baec-c34f8d7da072",
      "documentation": "Skip User’s Playback To Next Track",
      "method": "post",
      "endpoint": "me/player/next",
      "responses": [
        {
          "uuid": "15f2acbb-a5e9-4be6-a439-decef6131718",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "d7a0afe6-2c19-45f0-b6ec-f34b40f7cbde",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "a00dcc1a-f23f-4c1d-983e-7f68e13da81d",
      "documentation": "Pause a User's Playback",
      "method": "put",
      "endpoint": "me/player/pause",
      "responses": [
        {
          "uuid": "39f08701-e993-4946-b572-54368443a807",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "c4313e0a-b139-4099-8be7-55326f9febde",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "6956a373-cfc5-4835-bcf1-d99187fe47ad",
      "documentation": "Start/Resume a User's Playback",
      "method": "put",
      "endpoint": "me/player/play",
      "responses": [
        {
          "uuid": "b04bc2f6-9606-4270-b63e-3ff9a9665513",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "d22fed5c-37e6-4069-a210-5a124046a6ce",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "a9ed71c8-6176-4a2a-ba46-f04a3f9fa834",
      "documentation": "Skip User’s Playback To Previous Track",
      "method": "post",
      "endpoint": "me/player/previous",
      "responses": [
        {
          "uuid": "d968366e-0dde-4d9a-8915-aac955e5625a",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "4d1df6de-ce89-483f-8daa-bbd8ae0ad313",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "24b20b89-ca0e-4a73-a965-89218bf2c4dd",
      "documentation": "Add an item to queue",
      "method": "post",
      "endpoint": "me/player/queue",
      "responses": [
        {
          "uuid": "9e4d870e-59bd-4098-8dbf-76c469d672ef",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "7c4fc6c4-63fc-4a8c-b811-380700a73947",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "8170b97e-b387-42a4-a9f7-ff0634bd1405",
      "documentation": "Get Current User's Recently Played Tracks",
      "method": "get",
      "endpoint": "me/player/recently-played",
      "responses": [
        {
          "uuid": "1d36c642-a7b3-40e5-9262-7dd6fbab82dd",
          "body": "{\n  \"cursors\": {\n    \"after\": \"\"\n  },\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"context\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"played_at\": \"{{faker 'date.recent' 365}}\",\n      \"track\": {\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'datatype.number'}},\n        \"duration_ms\": {{faker 'datatype.number'}},\n        \"explicit\": {{faker 'datatype.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'datatype.boolean'}},\n        \"is_playable\": {{faker 'datatype.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'datatype.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'datatype.number'}},\n  \"next\": \"\",\n  \"total\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [play history objects](#play-history-object) (wrapped in a [cursor-based paging object](#cursor-based-paging-object)) in JSON format. The play history items each contain the context the track was played from (e.g. playlist, album), the date and time the track was played, and a [track object (simplified)](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject). On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nIf private session is enabled the response will be a `204 NO CONTENT` with an empty payload.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "d814b1d1-4fb9-4099-a4cd-20bf45dbc309",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [play history objects](#play-history-object) (wrapped in a [cursor-based paging object](#cursor-based-paging-object)) in JSON format. The play history items each contain the context the track was played from (e.g. playlist, album), the date and time the track was played, and a [track object (simplified)](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject). On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).\n\nIf private session is enabled the response will be a `204 NO CONTENT` with an empty payload.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "981295bb-991d-4173-8c77-fafdbc53a23b",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "9cf4f52d-04fb-4407-b653-758ca0067cec",
      "documentation": "Set Repeat Mode On User’s Playback",
      "method": "put",
      "endpoint": "me/player/repeat",
      "responses": [
        {
          "uuid": "1ff40362-3517-4358-b5e1-b964a76863e3",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "c0dd9099-20fd-45ef-b224-4f7fc84e5e5e",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "7ec22691-bfb7-4441-acfa-4a9a3420d988",
      "documentation": "Seek To Position In Currently Playing Track",
      "method": "put",
      "endpoint": "me/player/seek",
      "responses": [
        {
          "uuid": "acc8036a-e4f7-4630-b1f5-0936060f69bd",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "34c06889-abaf-48cf-917d-95f7e68b65d5",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "b4bd8c00-9a50-46d6-88c7-0c672dcba244",
      "documentation": "Toggle Shuffle For User’s Playback",
      "method": "put",
      "endpoint": "me/player/shuffle",
      "responses": [
        {
          "uuid": "ef5aea59-dcdf-46d4-8d3b-a1262b4535bb",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "a179a458-46d3-4319-bddc-ad673f7b45a3",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "b731e5ad-955b-42e7-82da-d8b4d57d4934",
      "documentation": "Set Volume For User's Playback",
      "method": "put",
      "endpoint": "me/player/volume",
      "responses": [
        {
          "uuid": "e7449c53-e1f5-4906-9408-c5421aa1f344",
          "body": "",
          "latency": 0,
          "statusCode": 204,
          "label": "A completed request will return a `204 NO CONTENT` response code, and then issue the command to the player. Due to the asynchronous nature of the issuance of the command, you should use the [Get Information About The User's Current Playback](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback) endpoint to check that your issued command was handled correctly by the player.\n\nIf the device is not found, the request will return `404 NOT FOUND` response code.\n\nIf the user making the request is non-premium, a `403 FORBIDDEN` response code will be returned.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "89a3d3d9-c4e3-442a-9465-aad076a0cd62",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "8cec2485-1c24-449c-bba9-2eae04272b77",
      "documentation": "Get a List of Current User's Playlists",
      "method": "get",
      "endpoint": "me/playlists",
      "responses": [
        {
          "uuid": "889695ca-a5f4-4200-b983-b1025f2f5dfa",
          "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"collaborative\": {{faker 'datatype.boolean'}},\n      \"description\": \"\",\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'datatype.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"owner\": {\n        \"display_name\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'datatype.number'}}\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"public\": {{faker 'datatype.boolean'}},\n      \"snapshot_id\": \"\",\n      \"tracks\": {\n        \"href\": \"\",\n        \"total\": {{faker 'datatype.number'}}\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'datatype.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'datatype.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Please note that the access token has to be tied to a user.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "4c6c4e25-ee86-4251-a361-cc2e73def660",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "1ad52f07-3f57-4ab3-943d-e9a88277ce43",
      "documentation": "Remove User's Saved Shows",
      "method": "delete",
      "endpoint": "me/shows",
      "responses": [
        {
          "uuid": "f051e24a-9538-4a95-acb8-71bdcb51a3b6",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details). A `403 Forbidden` while trying to add a show when you do not have the user's authorisation.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "42744044-597c-4942-9cca-2f81e0e1a320",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "c03dc117-5066-432f-ac91-f11b39d23b79",
      "documentation": "Get User's Saved Shows",
      "method": "get",
      "endpoint": "me/shows",
      "responses": [
        {
          "uuid": "753ee966-ecef-495c-8fa2-6de2d8ed9612",
          "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"show\": {\n        \"available_markets\": [\n          \"\"\n        ],\n        \"copyrights\": [\n          {\n            \"text\": \"\",\n            \"type\": \"\"\n          }\n        ],\n        \"description\": \"\",\n        \"explicit\": {{faker 'datatype.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'datatype.boolean'}},\n        \"languages\": [\n          \"\"\n        ],\n        \"media_type\": \"\",\n        \"name\": \"\",\n        \"publisher\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'datatype.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'datatype.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved show objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedshowobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format.\nIf the current user has no shows saved, the response will be an empty array. If a show is unavailable in the given `market` it is filtered out. The `total` field in the paging object represents the number of all items, filtered or not, and thus might be larger than the actual total number of observable items.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "3faee132-839f-4719-bfd7-5daed4822f2c",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "86b883e8-d4ee-4a05-9534-00481dedebe8",
      "documentation": "Save Shows for Current User",
      "method": "put",
      "endpoint": "me/shows",
      "responses": [
        {
          "uuid": "2e65084a-21a8-4cee-9632-f69c4c7d7150",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details). A `403 Forbidden` while trying to add a show when you do not have the user's authorisation or when the user already has have over 10,000 items saved in library.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "e1010545-3e83-4a03-9ce2-02ec8addaef5",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "7aac536d-fa36-4793-b7ec-345f23b4c3b0",
      "documentation": "Check User's Saved Shows",
      "method": "get",
      "endpoint": "me/shows/contains",
      "responses": [
        {
          "uuid": "49779016-9440-4502-b490-6c0af2f8ff12",
          "body": "[\n  {{faker 'datatype.boolean'}}\n]",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true`or `false` values, in the same order in which the `ids` were specified. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "6378cf76-32b8-44c3-8a6f-a72b3a4e99f8",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "e69155e2-6b1b-4d7d-850e-4e5618697248",
      "documentation": "Get a User's Top Artists and Tracks",
      "method": "get",
      "endpoint": "me/top/:type",
      "responses": [
        {
          "uuid": "4404d0ed-4c45-4aa7-a6b6-e02fd1324822",
          "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'datatype.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'datatype.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'datatype.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'datatype.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'datatype.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) of [Artists](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) or [Tracks](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject). On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "69e244a6-14e3-440f-9e48-baad76e5704a",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "8c55d97c-0701-44ce-b845-cbafc9e7f54c",
      "documentation": "Remove User's Saved Tracks",
      "method": "delete",
      "endpoint": "me/tracks",
      "responses": [
        {
          "uuid": "168780a3-40f1-4af5-8324-16d48e1d95ad",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` Success. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to remove an album when you do not have the user's authorization returns error `403` Forbidden.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "05a6534e-0b7b-4be4-80bc-cfb32c42607e",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "9ecc2f0d-72c4-480d-94d5-b66d776c8c2c",
      "documentation": "Get User's Saved Tracks",
      "method": "get",
      "endpoint": "me/tracks",
      "responses": [
        {
          "uuid": "bf90024b-4755-4fe8-bd28-1e2f86baab59",
          "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"track\": {\n        \"album\": {\n          \"album_group\": \"\",\n          \"album_type\": \"\",\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"name\": \"\",\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'datatype.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'datatype.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"release_date\": \"\",\n          \"release_date_precision\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"total_tracks\": {{faker 'datatype.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"followers\": {\n              \"href\": \"\",\n              \"total\": {{faker 'datatype.number'}}\n            },\n            \"genres\": [\n              \"\"\n            ],\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'datatype.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'datatype.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"popularity\": {{faker 'datatype.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'datatype.number'}},\n        \"duration_ms\": {{faker 'datatype.number'}},\n        \"explicit\": {{faker 'datatype.boolean'}},\n        \"external_ids\": {\n          \"ean\": \"\",\n          \"isrc\": \"\",\n          \"upc\": \"\"\n        },\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'datatype.boolean'}},\n        \"is_playable\": {{faker 'datatype.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"popularity\": {{faker 'datatype.number'}},\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'datatype.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'datatype.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'datatype.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [saved track objects](https://developer.spotify.com/documentation/web-api/reference/#object-savedtrackobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "e5d795ca-c663-4270-a488-f99b2b9da6a2",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "add27edf-9b3c-4aa5-b8c4-97ea0c196a4a",
      "documentation": "Save Tracks for User",
      "method": "put",
      "endpoint": "me/tracks",
      "responses": [
        {
          "uuid": "e1f5e5d8-7a2a-4bfe-a024-49229e6cabd6",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to add a track when you do not have the user's authorization, or when you have over 10.000 tracks in Your Music, returns error `403` Forbidden.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "4ee9c2e2-8f5d-454a-9af5-c8cd4245a433",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "234c12bb-6c68-497f-be28-cf3fd12292d2",
      "documentation": "Check User's Saved Tracks",
      "method": "get",
      "endpoint": "me/tracks/contains",
      "responses": [
        {
          "uuid": "0fa67395-9417-4bee-879d-8cb89a73d2c4",
          "body": "[\n  {{faker 'datatype.boolean'}}\n]",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "5bce19b7-616f-4d7a-b512-f520d89e41c3",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "468f49ca-b4f9-4209-b6e3-024193718e03",
      "documentation": "Get a Playlist",
      "method": "get",
      "endpoint": "playlists/:playlist_id",
      "responses": [
        {
          "uuid": "7b8887a5-0e8d-4b77-a011-edcb29b925fe",
          "body": "{\n  \"collaborative\": {{faker 'datatype.boolean'}},\n  \"description\": \"\",\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'datatype.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'datatype.number'}}\n    }\n  ],\n  \"name\": \"\",\n  \"owner\": {\n    \"display_name\": \"\",\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"followers\": {\n      \"href\": \"\",\n      \"total\": {{faker 'datatype.number'}}\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'datatype.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"public\": {{faker 'datatype.boolean'}},\n  \"snapshot_id\": \"\",\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"added_at\": \"{{faker 'date.recent' 365}}\",\n        \"added_by\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'datatype.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'datatype.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'datatype.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"is_local\": {{faker 'datatype.boolean'}},\n        \"track\": {\n          \"album\": {\n            \"album_group\": \"\",\n            \"album_type\": \"\",\n            \"artists\": [\n              {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"name\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              }\n            ],\n            \"available_markets\": [\n              \"\"\n            ],\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'datatype.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'datatype.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"release_date\": \"\",\n            \"release_date_precision\": \"\",\n            \"restrictions\": {\n              \"reason\": \"\"\n            },\n            \"total_tracks\": {{faker 'datatype.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"followers\": {\n                \"href\": \"\",\n                \"total\": {{faker 'datatype.number'}}\n              },\n              \"genres\": [\n                \"\"\n              ],\n              \"href\": \"\",\n              \"id\": \"\",\n              \"images\": [\n                {\n                  \"height\": {{faker 'datatype.number'}},\n                  \"url\": \"\",\n                  \"width\": {{faker 'datatype.number'}}\n                }\n              ],\n              \"name\": \"\",\n              \"popularity\": {{faker 'datatype.number'}},\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"disc_number\": {{faker 'datatype.number'}},\n          \"duration_ms\": {{faker 'datatype.number'}},\n          \"explicit\": {{faker 'datatype.boolean'}},\n          \"external_ids\": {\n            \"ean\": \"\",\n            \"isrc\": \"\",\n            \"upc\": \"\"\n          },\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"is_local\": {{faker 'datatype.boolean'}},\n          \"is_playable\": {{faker 'datatype.boolean'}},\n          \"linked_from\": {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"name\": \"\",\n          \"popularity\": {{faker 'datatype.number'}},\n          \"preview_url\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"track_number\": {{faker 'datatype.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the response body contains a [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject) in JSON format and the HTTP status code in the response header is `200` OK. If an episode is unavailable in the given `market`, its information will not be included in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Requesting playlists that you do not have the user's authorization to access returns error `403` Forbidden.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "9cae3dc4-2b14-449a-b9e8-79cb12fec366",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "d93829c3-df5f-45da-bfbf-5e65580ecb69",
      "documentation": "Change a Playlist's Details",
      "method": "put",
      "endpoint": "playlists/:playlist_id",
      "responses": [
        {
          "uuid": "0c5cf04d-4eb3-46ac-b7b6-821787c34de0",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "On success the HTTP status code in the response header is `200` OK.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to change a playlist when you do not have the user's authorization returns error `403` Forbidden.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "5dec195b-08c3-4c78-b533-d6a0802ee63c",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "232e8c5a-4dc6-4b6a-8362-1a3a6e9447d9",
      "documentation": "Unfollow Playlist",
      "method": "delete",
      "endpoint": "playlists/:playlist_id/followers",
      "responses": [
        {
          "uuid": "29ccceb4-a4b8-43e3-9d05-b66790db1389",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body is empty.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "207bce84-fdae-4f76-9a52-6834a80cd37f",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "563f152f-eb49-4205-acfe-6571bbe36043",
      "documentation": "Follow a Playlist",
      "method": "put",
      "endpoint": "playlists/:playlist_id/followers",
      "responses": [
        {
          "uuid": "30d0370a-fd57-4155-bccc-c7a3714a1e29",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body is empty.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "83fb8eac-4c35-46db-8ce6-5377753fdf1c",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "948dda03-718a-40f0-9f92-3b384373b107",
      "documentation": "Check if Users Follow a Playlist",
      "method": "get",
      "endpoint": "playlists/:playlist_id/followers/contains",
      "responses": [
        {
          "uuid": "e701faa0-bf0e-47af-b87a-a219f64503bf",
          "body": "[\n  {{faker 'datatype.boolean'}}\n]",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a JSON array of `true` or `false` values, in the same order in which the `ids` were specified.\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "eeb43be4-ed70-417d-b8da-ac5f2d10fe25",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "8b0a2528-83ab-4309-9cde-156ee2f73e3f",
      "documentation": "Get a Playlist Cover Image",
      "method": "get",
      "endpoint": "playlists/:playlist_id/images",
      "responses": [
        {
          "uuid": "fe3af042-1532-498f-91e9-c97ecd98f2d7",
          "body": "[\n  {\n    \"height\": {{faker 'datatype.number'}},\n    \"url\": \"\",\n    \"width\": {{faker 'datatype.number'}}\n  }\n]",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the response body contains a list of [image objects](https://developer.spotify.com/documentation/web-api/reference/#object-imageobject) in JSON format and the HTTP status code in the response header is `200` OK  \nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "fa1a3f6a-900c-4f27-a2be-cb8fc157c1d5",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "26ca1d18-2650-4d57-9734-8993066eadbc",
      "documentation": "Upload a Custom Playlist Cover Image",
      "method": "put",
      "endpoint": "playlists/:playlist_id/images",
      "responses": [
        {
          "uuid": "7837c5e1-9bd3-41ec-8c49-0a873b4905c7",
          "body": "",
          "latency": 0,
          "statusCode": 202,
          "label": "If you get status code `429`, it means that you have sent too many requests.\nIf this happens, have a look in the `Retry-After` header, where you will see a number displayed.\nThis is the amount of seconds that you need to wait, before you can retry sending your requests.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "2823541c-2a55-4bb2-bcb4-2f87a5cdf1ab",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "5a59d72a-873f-4a95-92a6-1d317591bb57",
      "documentation": "Remove Items from a Playlist",
      "method": "delete",
      "endpoint": "playlists/:playlist_id/tracks",
      "responses": [
        {
          "uuid": "68a4a7a4-91e3-497b-99bc-97d437c864a3",
          "body": "{\n  \"snapshot_id\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the response body contains a `snapshot_id` in JSON format\nand the HTTP status code in the response header is `200` OK. The `snapshot_id`\ncan be used to identify your playlist version in future requests.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/spotify-documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/spotify-documentation/web-api/#response-schema).\nTrying to remove an item when you do not have the user's authorization returns error `403` Forbidden.\nAttempting to use several different ways to remove items returns `400` Bad Request.\nOther client errors returning `400` Bad Request include specifying invalid positions.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "f3f98060-aeca-4056-a77e-2eb2d6fd2e55",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "d0ff7883-5461-40e3-9dc8-11e557b81298",
      "documentation": "Get a Playlist's Items",
      "method": "get",
      "endpoint": "playlists/:playlist_id/tracks",
      "responses": [
        {
          "uuid": "5a05bdb2-ea29-4323-81cf-a46565bd98fc",
          "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"added_at\": \"{{faker 'date.recent' 365}}\",\n      \"added_by\": {\n        \"display_name\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'datatype.number'}}\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"is_local\": {{faker 'datatype.boolean'}},\n      \"track\": {\n        \"album\": {\n          \"album_group\": \"\",\n          \"album_type\": \"\",\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"name\": \"\",\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'datatype.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'datatype.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"release_date\": \"\",\n          \"release_date_precision\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"total_tracks\": {{faker 'datatype.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"followers\": {\n              \"href\": \"\",\n              \"total\": {{faker 'datatype.number'}}\n            },\n            \"genres\": [\n              \"\"\n            ],\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'datatype.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'datatype.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"popularity\": {{faker 'datatype.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'datatype.number'}},\n        \"duration_ms\": {{faker 'datatype.number'}},\n        \"explicit\": {{faker 'datatype.boolean'}},\n        \"external_ids\": {\n          \"ean\": \"\",\n          \"isrc\": \"\",\n          \"upc\": \"\"\n        },\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'datatype.boolean'}},\n        \"is_playable\": {{faker 'datatype.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"popularity\": {{faker 'datatype.number'}},\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'datatype.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    }\n  ],\n  \"limit\": {{faker 'datatype.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'datatype.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the response body contains an array of [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject) and [episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) (depends on the `additional_types` parameter), wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) in JSON format and the HTTP status code in the response header is `200` OK. If an episode is unavailable in the given `market`, its information will not be included in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Requesting playlists that you do not have the user's authorization to access returns error `403` Forbidden.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "282508e8-967c-4caa-b3d5-898b27fdf899",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "f9154c05-13cc-4a55-a386-97c71cc6073b",
      "documentation": "Add Items to a Playlist",
      "method": "post",
      "endpoint": "playlists/:playlist_id/tracks",
      "responses": [
        {
          "uuid": "96f5a967-d45d-4ba8-8303-47ef18844919",
          "body": "{\n  \"snapshot_id\": \"\"\n}",
          "latency": 0,
          "statusCode": 201,
          "label": "On success, the HTTP status code in the response header is `201` Created. The response body contains a `snapshot_id` in JSON format. The `snapshot_id` can be used to identify your playlist version in future requests. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to add an item when you do not have the user's authorization, or when there are more than 10.000 items in the playlist, returns error `403` Forbidden.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "eb399638-15e8-4506-9a1a-248c863060a7",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "e3c0c200-3a86-440e-9fd8-8904b5d91f0d",
      "documentation": "Reorder or Replace a Playlist's Items",
      "method": "put",
      "endpoint": "playlists/:playlist_id/tracks",
      "responses": [
        {
          "uuid": "c655d0b5-9e03-47b8-a154-6688c548a35d",
          "body": "{\n  \"snapshot_id\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On a successful **reorder** operation, the response body contains a `snapshot_id` in JSON format\nand the HTTP status code in the response header is `200` OK. The `snapshot_id`\ncan be used to identify your playlist version in future requests.\n\nOn a successful **replace** operation, the HTTP status code in the response header is `201`\nCreated.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),\nthe response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),\nand the existing playlist is unmodified.\nTrying to set an item when you do not have the user's authorization returns error `403` Forbidden.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "fc53a330-5ae5-4cea-9642-be890c239173",
          "body": "{\n  \"snapshot_id\": \"\"\n}",
          "latency": 0,
          "statusCode": 201,
          "label": "On a successful **reorder** operation, the response body contains a `snapshot_id` in JSON format\nand the HTTP status code in the response header is `200` OK. The `snapshot_id`\ncan be used to identify your playlist version in future requests.\n\nOn a successful **replace** operation, the HTTP status code in the response header is `201`\nCreated.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes),\nthe response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema),\nand the existing playlist is unmodified.\nTrying to set an item when you do not have the user's authorization returns error `403` Forbidden.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "01a17fb1-5d45-4280-ab5e-c3ca47390bd9",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "64b95fa9-016e-4abd-ae84-eced254b5ff8",
      "documentation": "Get Recommendations",
      "method": "get",
      "endpoint": "recommendations",
      "responses": [
        {
          "uuid": "945ffa96-48aa-429c-94c2-e4ab72ec9817",
          "body": "{\n  \"seeds\": [\n    {\n      \"afterFilteringSize\": {{faker 'datatype.number'}},\n      \"afterRelinkingSize\": {{faker 'datatype.number'}},\n      \"href\": \"\",\n      \"id\": \"\",\n      \"initialPoolSize\": {{faker 'datatype.number'}},\n      \"type\": \"\"\n    }\n  ],\n  \"tracks\": [\n    {\n      \"album\": {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'datatype.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'datatype.number'}}\n          },\n          \"genres\": [\n            \"\"\n          ],\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'datatype.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'datatype.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"popularity\": {{faker 'datatype.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"disc_number\": {{faker 'datatype.number'}},\n      \"duration_ms\": {{faker 'datatype.number'}},\n      \"explicit\": {{faker 'datatype.boolean'}},\n      \"external_ids\": {\n        \"ean\": \"\",\n        \"isrc\": \"\",\n        \"upc\": \"\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"is_local\": {{faker 'datatype.boolean'}},\n      \"is_playable\": {{faker 'datatype.boolean'}},\n      \"linked_from\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"name\": \"\",\n      \"popularity\": {{faker 'datatype.number'}},\n      \"preview_url\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"track_number\": {{faker 'datatype.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains a recommendations response object in JSON format.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "adf95911-2b3d-4de7-a4e0-246052447f22",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "8a44bfc3-2228-4cca-84f3-1b5f00731002",
      "documentation": "Get Recommendation Genres",
      "method": "get",
      "endpoint": "recommendations/available-genre-seeds",
      "responses": [
        {
          "uuid": "be917f4b-d535-4e65-9a12-abd94efa022c",
          "body": "{\n  \"genres\": [\n    \"\"\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200 OK` and the response body contains a recommendations response object in JSON format.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "76e60591-d8fb-4c93-8d37-d7b1b4356599",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "8f33d12c-306d-4d6d-ba34-66965e3d42a7",
      "documentation": "Search for an Item",
      "method": "get",
      "endpoint": "search",
      "responses": [
        {
          "uuid": "d79587cd-4223-416a-9825-04cbd4f1a010",
          "body": "{\n  \"albums\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'datatype.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"artists\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'datatype.number'}}\n        },\n        \"genres\": [\n          \"\"\n        ],\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"popularity\": {{faker 'datatype.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"episodes\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"audio_preview_url\": \"\",\n        \"description\": \"\",\n        \"duration_ms\": {{faker 'datatype.number'}},\n        \"explicit\": {{faker 'datatype.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'datatype.boolean'}},\n        \"is_playable\": {{faker 'datatype.boolean'}},\n        \"language\": \"\",\n        \"languages\": [\n          \"\"\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"resume_point\": {\n          \"fully_played\": {{faker 'datatype.boolean'}},\n          \"resume_position_ms\": {{faker 'datatype.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"playlists\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"collaborative\": {{faker 'datatype.boolean'}},\n        \"description\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"owner\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'datatype.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'datatype.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'datatype.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"public\": {{faker 'datatype.boolean'}},\n        \"snapshot_id\": \"\",\n        \"tracks\": {\n          \"href\": \"\",\n          \"total\": {{faker 'datatype.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"shows\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"available_markets\": [\n          \"\"\n        ],\n        \"copyrights\": [\n          {\n            \"text\": \"\",\n            \"type\": \"\"\n          }\n        ],\n        \"description\": \"\",\n        \"explicit\": {{faker 'datatype.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'datatype.boolean'}},\n        \"languages\": [\n          \"\"\n        ],\n        \"media_type\": \"\",\n        \"name\": \"\",\n        \"publisher\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"album\": {\n          \"album_group\": \"\",\n          \"album_type\": \"\",\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"href\": \"\",\n              \"id\": \"\",\n              \"name\": \"\",\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'datatype.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'datatype.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"release_date\": \"\",\n          \"release_date_precision\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"total_tracks\": {{faker 'datatype.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"followers\": {\n              \"href\": \"\",\n              \"total\": {{faker 'datatype.number'}}\n            },\n            \"genres\": [\n              \"\"\n            ],\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'datatype.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'datatype.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"popularity\": {{faker 'datatype.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"disc_number\": {{faker 'datatype.number'}},\n        \"duration_ms\": {{faker 'datatype.number'}},\n        \"explicit\": {{faker 'datatype.boolean'}},\n        \"external_ids\": {\n          \"ean\": \"\",\n          \"isrc\": \"\",\n          \"upc\": \"\"\n        },\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"is_local\": {{faker 'datatype.boolean'}},\n        \"is_playable\": {{faker 'datatype.boolean'}},\n        \"linked_from\": {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"name\": \"\",\n        \"popularity\": {{faker 'datatype.number'}},\n        \"preview_url\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"track_number\": {{faker 'datatype.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "**On success**:\n\n- In the response ***header*** the HTTP status code is `200` OK.\n- For each type provided in the `type` parameter, the response ***body*** contains an array of [artist objects](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject) / [simplified album objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedalbumobject) / [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject) / [simplified show objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject) / [simplified episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject) in JSON.\n\n**On error**:\n\n- The ***header*** status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes).\n- The response ***body*** contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "5d18f74e-9f6d-46b3-a18f-2f13f51e914a",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "1979d447-95d6-4a29-b3af-38f14c580266",
      "documentation": "Get Multiple Shows",
      "method": "get",
      "endpoint": "shows",
      "responses": [
        {
          "uuid": "7909d8b1-e438-478c-869a-4edcd4484945",
          "body": "{\n  \"shows\": [\n    {\n      \"available_markets\": [\n        \"\"\n      ],\n      \"copyrights\": [\n        {\n          \"text\": \"\",\n          \"type\": \"\"\n        }\n      ],\n      \"description\": \"\",\n      \"explicit\": {{faker 'datatype.boolean'}},\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"html_description\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'datatype.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"is_externally_hosted\": {{faker 'datatype.boolean'}},\n      \"languages\": [\n        \"\"\n      ],\n      \"media_type\": \"\",\n      \"name\": \"\",\n      \"publisher\": \"\",\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains an object whose key is `shows` and whose\nvalue is an array of [simple show object](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedshowobject)\nin JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. If a show is unavailable in the given `market`, a `null` value is returned. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "736dd81a-5b6c-4b34-8352-1634adef0b54",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "ce87dc3f-2159-4ee1-8827-84b621a95ea9",
      "documentation": "Get a Show",
      "method": "get",
      "endpoint": "shows/:id",
      "responses": [
        {
          "uuid": "d0537418-1b9f-4db0-a88d-cac66eeb85e0",
          "body": "{\n  \"available_markets\": [\n    \"\"\n  ],\n  \"copyrights\": [\n    {\n      \"text\": \"\",\n      \"type\": \"\"\n    }\n  ],\n  \"description\": \"\",\n  \"episodes\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"audio_preview_url\": \"\",\n        \"description\": \"\",\n        \"duration_ms\": {{faker 'datatype.number'}},\n        \"explicit\": {{faker 'datatype.boolean'}},\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"html_description\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"is_externally_hosted\": {{faker 'datatype.boolean'}},\n        \"is_playable\": {{faker 'datatype.boolean'}},\n        \"language\": \"\",\n        \"languages\": [\n          \"\"\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"resume_point\": {\n          \"fully_played\": {{faker 'datatype.boolean'}},\n          \"resume_position_ms\": {{faker 'datatype.number'}}\n        },\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"explicit\": {{faker 'datatype.boolean'}},\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"href\": \"\",\n  \"html_description\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'datatype.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'datatype.number'}}\n    }\n  ],\n  \"is_externally_hosted\": {{faker 'datatype.boolean'}},\n  \"languages\": [\n    \"\"\n  ],\n  \"media_type\": \"\",\n  \"name\": \"\",\n  \"publisher\": \"\",\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains a [show object](https://developer.spotify.com/documentation/web-api/reference/#object-showobject)\nin JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\nand the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).  \n\nIf a show is unavailable in the given `market` the HTTP status code in the response header is `404` NOT FOUND.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "0b9c0c67-08e9-4723-98cb-56eda842bdcf",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "4f951f35-f1f0-44f4-9f82-e505fa1fbc04",
      "documentation": "Get a Show's Episodes",
      "method": "get",
      "endpoint": "shows/:id/episodes",
      "responses": [
        {
          "uuid": "bba916ce-8205-4f2e-8eeb-b025a2ccadbd",
          "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"audio_preview_url\": \"\",\n      \"description\": \"\",\n      \"duration_ms\": {{faker 'datatype.number'}},\n      \"explicit\": {{faker 'datatype.boolean'}},\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"html_description\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'datatype.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"is_externally_hosted\": {{faker 'datatype.boolean'}},\n      \"is_playable\": {{faker 'datatype.boolean'}},\n      \"language\": \"\",\n      \"languages\": [\n        \"\"\n      ],\n      \"name\": \"\",\n      \"release_date\": \"\",\n      \"release_date_precision\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"resume_point\": {\n        \"fully_played\": {{faker 'datatype.boolean'}},\n        \"resume_position_ms\": {{faker 'datatype.number'}}\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'datatype.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'datatype.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of [simplified episode objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedepisodeobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format.  \n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#error-details).  \n\nIf a show is unavailable in the given `market` the HTTP status code in the response header is `404` NOT FOUND. Unavailable episodes are filtered out.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "f615c687-5c1d-4b70-ab35-c6186c1db30e",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "2925f63f-81fc-4138-b082-147e1f4d1bcf",
      "documentation": "Get Several Tracks",
      "method": "get",
      "endpoint": "tracks",
      "responses": [
        {
          "uuid": "caa15da5-ed7f-4092-9fe7-391014ce53dd",
          "body": "{\n  \"tracks\": [\n    {\n      \"album\": {\n        \"album_group\": \"\",\n        \"album_type\": \"\",\n        \"artists\": [\n          {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"name\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          }\n        ],\n        \"available_markets\": [\n          \"\"\n        ],\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"name\": \"\",\n        \"release_date\": \"\",\n        \"release_date_precision\": \"\",\n        \"restrictions\": {\n          \"reason\": \"\"\n        },\n        \"total_tracks\": {{faker 'datatype.number'}},\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"artists\": [\n        {\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'datatype.number'}}\n          },\n          \"genres\": [\n            \"\"\n          ],\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'datatype.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'datatype.number'}}\n            }\n          ],\n          \"name\": \"\",\n          \"popularity\": {{faker 'datatype.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      ],\n      \"available_markets\": [\n        \"\"\n      ],\n      \"disc_number\": {{faker 'datatype.number'}},\n      \"duration_ms\": {{faker 'datatype.number'}},\n      \"explicit\": {{faker 'datatype.boolean'}},\n      \"external_ids\": {\n        \"ean\": \"\",\n        \"isrc\": \"\",\n        \"upc\": \"\"\n      },\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"is_local\": {{faker 'datatype.boolean'}},\n      \"is_playable\": {{faker 'datatype.boolean'}},\n      \"linked_from\": {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"name\": \"\",\n      \"popularity\": {{faker 'datatype.number'}},\n      \"preview_url\": \"\",\n      \"restrictions\": {\n        \"reason\": \"\"\n      },\n      \"track_number\": {{faker 'datatype.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains an object whose key is `tracks` and whose\nvalue is an array of [track objects](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)\nin JSON format.\n\nObjects are returned in the order requested. If an object is not found, a `null` value is returned in the appropriate position. Duplicate `ids` in the query will result in duplicate objects in the response. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "b0203f73-18fb-4892-8f2e-54a2da91dd0c",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "6657551d-71d9-49ab-8bf8-23fa56073fb1",
      "documentation": "Get a Track",
      "method": "get",
      "endpoint": "tracks/:id",
      "responses": [
        {
          "uuid": "65452f29-a55e-465a-a0dd-3c9a8eb3d693",
          "body": "{\n  \"album\": {\n    \"album_group\": \"\",\n    \"album_type\": \"\",\n    \"artists\": [\n      {\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"name\": \"\",\n        \"type\": \"\",\n        \"uri\": \"\"\n      }\n    ],\n    \"available_markets\": [\n      \"\"\n    ],\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'datatype.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"name\": \"\",\n    \"release_date\": \"\",\n    \"release_date_precision\": \"\",\n    \"restrictions\": {\n      \"reason\": \"\"\n    },\n    \"total_tracks\": {{faker 'datatype.number'}},\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"artists\": [\n    {\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"followers\": {\n        \"href\": \"\",\n        \"total\": {{faker 'datatype.number'}}\n      },\n      \"genres\": [\n        \"\"\n      ],\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'datatype.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"popularity\": {{faker 'datatype.number'}},\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"available_markets\": [\n    \"\"\n  ],\n  \"disc_number\": {{faker 'datatype.number'}},\n  \"duration_ms\": {{faker 'datatype.number'}},\n  \"explicit\": {{faker 'datatype.boolean'}},\n  \"external_ids\": {\n    \"ean\": \"\",\n    \"isrc\": \"\",\n    \"upc\": \"\"\n  },\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"is_local\": {{faker 'datatype.boolean'}},\n  \"is_playable\": {{faker 'datatype.boolean'}},\n  \"linked_from\": {\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"name\": \"\",\n  \"popularity\": {{faker 'datatype.number'}},\n  \"preview_url\": \"\",\n  \"restrictions\": {\n    \"reason\": \"\"\n  },\n  \"track_number\": {{faker 'datatype.number'}},\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200`\nOK and the response body contains a [track object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)\nin JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes)\nand the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "a8a33af0-be95-4f51-84b3-e0b9280a8342",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "2db02939-1eee-4fe9-b33f-f8160631b1a0",
      "documentation": "Get a User's Profile",
      "method": "get",
      "endpoint": "users/:user_id",
      "responses": [
        {
          "uuid": "c0870b72-221b-48b4-abc9-11748f2bcd2d",
          "body": "{\n  \"display_name\": \"\",\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'datatype.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'datatype.number'}}\n    }\n  ],\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains a [user object](https://developer.spotify.com/documentation/web-api/reference/#object-publicuserobject) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). If a user with that user_id doesn't exist, the status code is `404` NOT FOUND.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "bab86702-1246-4333-aebd-179c205f2e56",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "548898c1-fb51-46e4-9c42-7a7691f35339",
      "documentation": "Get a List of a User's Playlists",
      "method": "get",
      "endpoint": "users/:user_id/playlists",
      "responses": [
        {
          "uuid": "21121726-3454-4b6b-ba91-8bebfc1adc8f",
          "body": "{\n  \"href\": \"\",\n  \"items\": [\n    {\n      \"collaborative\": {{faker 'datatype.boolean'}},\n      \"description\": \"\",\n      \"external_urls\": {\n        \"spotify\": \"\"\n      },\n      \"href\": \"\",\n      \"id\": \"\",\n      \"images\": [\n        {\n          \"height\": {{faker 'datatype.number'}},\n          \"url\": \"\",\n          \"width\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"name\": \"\",\n      \"owner\": {\n        \"display_name\": \"\",\n        \"external_urls\": {\n          \"spotify\": \"\"\n        },\n        \"followers\": {\n          \"href\": \"\",\n          \"total\": {{faker 'datatype.number'}}\n        },\n        \"href\": \"\",\n        \"id\": \"\",\n        \"images\": [\n          {\n            \"height\": {{faker 'datatype.number'}},\n            \"url\": \"\",\n            \"width\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"type\": \"\",\n        \"uri\": \"\"\n      },\n      \"public\": {{faker 'datatype.boolean'}},\n      \"snapshot_id\": \"\",\n      \"tracks\": {\n        \"href\": \"\",\n        \"total\": {{faker 'datatype.number'}}\n      },\n      \"type\": \"\",\n      \"uri\": \"\"\n    }\n  ],\n  \"limit\": {{faker 'datatype.number'}},\n  \"next\": \"\",\n  \"offset\": {{faker 'datatype.number'}},\n  \"previous\": \"\",\n  \"total\": {{faker 'datatype.number'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the HTTP status code in the response header is `200` OK and the response body contains an array of simplified [playlist objects](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject) (wrapped in a [paging object](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)) in JSON format. On error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema).",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "8f73a7dc-263f-4700-acbd-15a08eb99a53",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "c9daa7df-fa52-403f-800b-f445e874a1a8",
      "documentation": "Create a Playlist",
      "method": "post",
      "endpoint": "users/:user_id/playlists",
      "responses": [
        {
          "uuid": "a0e2c444-a5d4-4caa-b811-92c84d5c2272",
          "body": "{\n  \"collaborative\": {{faker 'datatype.boolean'}},\n  \"description\": \"\",\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'datatype.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'datatype.number'}}\n    }\n  ],\n  \"name\": \"\",\n  \"owner\": {\n    \"display_name\": \"\",\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"followers\": {\n      \"href\": \"\",\n      \"total\": {{faker 'datatype.number'}}\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'datatype.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"public\": {{faker 'datatype.boolean'}},\n  \"snapshot_id\": \"\",\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"added_at\": \"{{faker 'date.recent' 365}}\",\n        \"added_by\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'datatype.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'datatype.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'datatype.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"is_local\": {{faker 'datatype.boolean'}},\n        \"track\": {\n          \"album\": {\n            \"album_group\": \"\",\n            \"album_type\": \"\",\n            \"artists\": [\n              {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"name\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              }\n            ],\n            \"available_markets\": [\n              \"\"\n            ],\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'datatype.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'datatype.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"release_date\": \"\",\n            \"release_date_precision\": \"\",\n            \"restrictions\": {\n              \"reason\": \"\"\n            },\n            \"total_tracks\": {{faker 'datatype.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"followers\": {\n                \"href\": \"\",\n                \"total\": {{faker 'datatype.number'}}\n              },\n              \"genres\": [\n                \"\"\n              ],\n              \"href\": \"\",\n              \"id\": \"\",\n              \"images\": [\n                {\n                  \"height\": {{faker 'datatype.number'}},\n                  \"url\": \"\",\n                  \"width\": {{faker 'datatype.number'}}\n                }\n              ],\n              \"name\": \"\",\n              \"popularity\": {{faker 'datatype.number'}},\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"disc_number\": {{faker 'datatype.number'}},\n          \"duration_ms\": {{faker 'datatype.number'}},\n          \"explicit\": {{faker 'datatype.boolean'}},\n          \"external_ids\": {\n            \"ean\": \"\",\n            \"isrc\": \"\",\n            \"upc\": \"\"\n          },\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"is_local\": {{faker 'datatype.boolean'}},\n          \"is_playable\": {{faker 'datatype.boolean'}},\n          \"linked_from\": {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"name\": \"\",\n          \"popularity\": {{faker 'datatype.number'}},\n          \"preview_url\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"track_number\": {{faker 'datatype.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "On success, the response body contains the created [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)\nin JSON format and the HTTP status code in the response header is `200` OK or\n`201` Created. There is also a `Location` response header giving the Web API\nendpoint for the new playlist.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "daee1233-7111-4e98-8f1f-565408c51141",
          "body": "{\n  \"collaborative\": {{faker 'datatype.boolean'}},\n  \"description\": \"\",\n  \"external_urls\": {\n    \"spotify\": \"\"\n  },\n  \"followers\": {\n    \"href\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"href\": \"\",\n  \"id\": \"\",\n  \"images\": [\n    {\n      \"height\": {{faker 'datatype.number'}},\n      \"url\": \"\",\n      \"width\": {{faker 'datatype.number'}}\n    }\n  ],\n  \"name\": \"\",\n  \"owner\": {\n    \"display_name\": \"\",\n    \"external_urls\": {\n      \"spotify\": \"\"\n    },\n    \"followers\": {\n      \"href\": \"\",\n      \"total\": {{faker 'datatype.number'}}\n    },\n    \"href\": \"\",\n    \"id\": \"\",\n    \"images\": [\n      {\n        \"height\": {{faker 'datatype.number'}},\n        \"url\": \"\",\n        \"width\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"type\": \"\",\n    \"uri\": \"\"\n  },\n  \"public\": {{faker 'datatype.boolean'}},\n  \"snapshot_id\": \"\",\n  \"tracks\": {\n    \"href\": \"\",\n    \"items\": [\n      {\n        \"added_at\": \"{{faker 'date.recent' 365}}\",\n        \"added_by\": {\n          \"display_name\": \"\",\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"followers\": {\n            \"href\": \"\",\n            \"total\": {{faker 'datatype.number'}}\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"images\": [\n            {\n              \"height\": {{faker 'datatype.number'}},\n              \"url\": \"\",\n              \"width\": {{faker 'datatype.number'}}\n            }\n          ],\n          \"type\": \"\",\n          \"uri\": \"\"\n        },\n        \"is_local\": {{faker 'datatype.boolean'}},\n        \"track\": {\n          \"album\": {\n            \"album_group\": \"\",\n            \"album_type\": \"\",\n            \"artists\": [\n              {\n                \"external_urls\": {\n                  \"spotify\": \"\"\n                },\n                \"href\": \"\",\n                \"id\": \"\",\n                \"name\": \"\",\n                \"type\": \"\",\n                \"uri\": \"\"\n              }\n            ],\n            \"available_markets\": [\n              \"\"\n            ],\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"images\": [\n              {\n                \"height\": {{faker 'datatype.number'}},\n                \"url\": \"\",\n                \"width\": {{faker 'datatype.number'}}\n              }\n            ],\n            \"name\": \"\",\n            \"release_date\": \"\",\n            \"release_date_precision\": \"\",\n            \"restrictions\": {\n              \"reason\": \"\"\n            },\n            \"total_tracks\": {{faker 'datatype.number'}},\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"artists\": [\n            {\n              \"external_urls\": {\n                \"spotify\": \"\"\n              },\n              \"followers\": {\n                \"href\": \"\",\n                \"total\": {{faker 'datatype.number'}}\n              },\n              \"genres\": [\n                \"\"\n              ],\n              \"href\": \"\",\n              \"id\": \"\",\n              \"images\": [\n                {\n                  \"height\": {{faker 'datatype.number'}},\n                  \"url\": \"\",\n                  \"width\": {{faker 'datatype.number'}}\n                }\n              ],\n              \"name\": \"\",\n              \"popularity\": {{faker 'datatype.number'}},\n              \"type\": \"\",\n              \"uri\": \"\"\n            }\n          ],\n          \"available_markets\": [\n            \"\"\n          ],\n          \"disc_number\": {{faker 'datatype.number'}},\n          \"duration_ms\": {{faker 'datatype.number'}},\n          \"explicit\": {{faker 'datatype.boolean'}},\n          \"external_ids\": {\n            \"ean\": \"\",\n            \"isrc\": \"\",\n            \"upc\": \"\"\n          },\n          \"external_urls\": {\n            \"spotify\": \"\"\n          },\n          \"href\": \"\",\n          \"id\": \"\",\n          \"is_local\": {{faker 'datatype.boolean'}},\n          \"is_playable\": {{faker 'datatype.boolean'}},\n          \"linked_from\": {\n            \"external_urls\": {\n              \"spotify\": \"\"\n            },\n            \"href\": \"\",\n            \"id\": \"\",\n            \"type\": \"\",\n            \"uri\": \"\"\n          },\n          \"name\": \"\",\n          \"popularity\": {{faker 'datatype.number'}},\n          \"preview_url\": \"\",\n          \"restrictions\": {\n            \"reason\": \"\"\n          },\n          \"track_number\": {{faker 'datatype.number'}},\n          \"type\": \"\",\n          \"uri\": \"\"\n        }\n      }\n    ],\n    \"limit\": {{faker 'datatype.number'}},\n    \"next\": \"\",\n    \"offset\": {{faker 'datatype.number'}},\n    \"previous\": \"\",\n    \"total\": {{faker 'datatype.number'}}\n  },\n  \"type\": \"\",\n  \"uri\": \"\"\n}",
          "latency": 0,
          "statusCode": 201,
          "label": "On success, the response body contains the created [playlist object](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)\nin JSON format and the HTTP status code in the response header is `200` OK or\n`201` Created. There is also a `Location` response header giving the Web API\nendpoint for the new playlist.\n\nOn error, the header status code is an [error code](https://developer.spotify.com/documentation/web-api/#response-status-codes) and the response body contains an [error object](https://developer.spotify.com/documentation/web-api/#response-schema). Trying to create a playlist when you do not have the user's authorization returns error `403` Forbidden.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "d4c03376-dd08-41ab-9666-d4150dc32dbb",
          "body": "{\n  \"error\": {\n    \"message\": \"\",\n    \"status\": {{faker 'datatype.number'}}\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Unexpected error",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "data": []
}