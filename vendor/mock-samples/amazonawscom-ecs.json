{
  "uuid": "5d448139-ad2c-48a9-9b3d-336115fc334d",
  "lastMigration": 24,
  "name": "Amazon EC2 Container Service",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3000,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "f6010881-0a23-400e-afcd-f73a91c7cd46",
      "documentation": "<p>Creates a new capacity provider. Capacity providers are associated with an Amazon ECS cluster and are used in capacity provider strategies to facilitate cluster auto scaling.</p> <p>Only capacity providers using an Auto Scaling group can be created. Amazon ECS tasks on Fargate use the <code>FARGATE</code> and <code>FARGATE_SPOT</code> capacity providers which are already created and available to all accounts in Regions supported by Fargate.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.CreateCapacityProvider",
      "responses": [
        {
          "uuid": "29e3417e-bf98-48a6-9dd8-839f0455cf41",
          "body": "{\n  \"capacityProvider\": {\n    \"capacityProviderArn\": \"\",\n    \"name\": \"\",\n    \"status\": \"\",\n    \"autoScalingGroupProvider\": {\n      \"autoScalingGroupArn\": \"\",\n      \"managedScaling\": {\n        \"status\": \"\",\n        \"targetCapacity\": {{faker 'datatype.number'}},\n        \"minimumScalingStepSize\": {{faker 'datatype.number'}},\n        \"maximumScalingStepSize\": {{faker 'datatype.number'}},\n        \"instanceWarmupPeriod\": {{faker 'datatype.number'}}\n      },\n      \"managedTerminationProtection\": \"\"\n    },\n    \"updateStatus\": \"\",\n    \"updateStatusReason\": \"\",\n    \"tags\": [\n      {\n        \"key\": \"\",\n        \"value\": \"\"\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "e2aee969-040e-4ac3-94ba-89a19557c6ba",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "8a626556-66e1-424d-8f87-3a3cf33e42c4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "4d023141-83c1-4c62-9fd4-4a58a54d455a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "41a3f92b-bfba-412b-89b6-f87cbe8e88be",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "LimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "3379a391-fdd7-4771-bfdf-911bcf7196d5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UpdateInProgressException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "d6a220ec-c067-49b0-b63a-3fb22749cc56",
      "documentation": "<p>Creates a new Amazon ECS cluster. By default, your account receives a <code>default</code> cluster when you launch your first container instance. However, you can create your own cluster with a unique name with the <code>CreateCluster</code> action.</p> <note> <p>When you call the <a>CreateCluster</a> API operation, Amazon ECS attempts to create the Amazon ECS service-linked role for your account so that required resources in other Amazon Web Services services can be managed on your behalf. However, if the IAM user that makes the call does not have permissions to create the service-linked role, it is not created. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html\">Using Service-Linked Roles for Amazon ECS</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.CreateCluster",
      "responses": [
        {
          "uuid": "ff416eb7-ea8a-49a6-b184-dc559d0ea521",
          "body": "{\n  \"cluster\": {\n    \"activeServicesCount\": 0,\n    \"clusterArn\": \"arn:aws:ecs:us-east-1:012345678910:cluster/my_cluster\",\n    \"clusterName\": \"my_cluster\",\n    \"pendingTasksCount\": 0,\n    \"registeredContainerInstancesCount\": 0,\n    \"runningTasksCount\": 0,\n    \"status\": \"ACTIVE\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "053a7fb4-a0b6-459b-aead-9b2e8421411d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "0d7b7801-6d2e-4f24-a72a-3abad7a2d120",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "405b697c-16ac-4458-9924-ba1ed0caaa74",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "ad3775eb-b1fd-4ef7-a634-ff83ad6615ad",
      "documentation": "<p>Runs and maintains a desired number of tasks from a specified task definition. If the number of tasks running in a service drops below the <code>desiredCount</code>, Amazon ECS runs another copy of the task in the specified cluster. To update an existing service, see the UpdateService action.</p> <p>In addition to maintaining the desired count of tasks in your service, you can optionally run your service behind one or more load balancers. The load balancers distribute traffic across the tasks that are associated with the service. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-load-balancing.html\">Service Load Balancing</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> <p>Tasks for services that <i>do not</i> use a load balancer are considered healthy if they're in the <code>RUNNING</code> state. Tasks for services that <i>do</i> use a load balancer are considered healthy if they're in the <code>RUNNING</code> state and the container instance that they're hosted on is reported as healthy by the load balancer.</p> <p>There are two service scheduler strategies available:</p> <ul> <li> <p> <code>REPLICA</code> - The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html\">Service Scheduler Concepts</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> </li> <li> <p> <code>DAEMON</code> - The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks and will stop tasks that do not meet the placement constraints. When using this strategy, you don't need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html\">Service Scheduler Concepts</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> </li> </ul> <p>You can optionally specify a deployment configuration for your service. The deployment is triggered by changing properties, such as the task definition or the desired count of a service, with an <a>UpdateService</a> operation. The default value for a replica service for <code>minimumHealthyPercent</code> is 100%. The default value for a daemon service for <code>minimumHealthyPercent</code> is 0%.</p> <p>If a service is using the <code>ECS</code> deployment controller, the minimum healthy percent represents a lower limit on the number of tasks in a service that must remain in the <code>RUNNING</code> state during a deployment, as a percentage of the desired number of tasks (rounded up to the nearest integer), and while any container instances are in the <code>DRAINING</code> state if the service contains tasks using the EC2 launch type. This parameter enables you to deploy without using additional cluster capacity. For example, if your service has a desired number of four tasks and a minimum healthy percent of 50%, the scheduler might stop two existing tasks to free up cluster capacity before starting two new tasks. Tasks for services that <i>do not</i> use a load balancer are considered healthy if they're in the <code>RUNNING</code> state. Tasks for services that <i>do</i> use a load balancer are considered healthy if they're in the <code>RUNNING</code> state and they're reported as healthy by the load balancer. The default value for minimum healthy percent is 100%.</p> <p>If a service is using the <code>ECS</code> deployment controller, the <b>maximum percent</b> parameter represents an upper limit on the number of tasks in a service that are allowed in the <code>RUNNING</code> or <code>PENDING</code> state during a deployment, as a percentage of the desired number of tasks (rounded down to the nearest integer), and while any container instances are in the <code>DRAINING</code> state if the service contains tasks using the EC2 launch type. This parameter enables you to define the deployment batch size. For example, if your service has a desired number of four tasks and a maximum percent value of 200%, the scheduler may start four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available). The default value for maximum percent is 200%.</p> <p>If a service is using either the <code>CODE_DEPLOY</code> or <code>EXTERNAL</code> deployment controller types and tasks that use the EC2 launch type, the <b>minimum healthy percent</b> and <b>maximum percent</b> values are used only to define the lower and upper limit on the number of the tasks in the service that remain in the <code>RUNNING</code> state while the container instances are in the <code>DRAINING</code> state. If the tasks in the service use the Fargate launch type, the minimum healthy percent and maximum percent values aren't used, although they're currently visible when describing your service.</p> <p>When creating a service that uses the <code>EXTERNAL</code> deployment controller, you can specify only parameters that aren't controlled at the task set level. The only required parameter is the service name. You control your services using the <a>CreateTaskSet</a> operation. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\">Amazon ECS Deployment Types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> <p>When the service scheduler launches new tasks, it determines task placement in your cluster using the following logic:</p> <ul> <li> <p>Determine which of the container instances in your cluster can support your service's task definition (for example, they have the required CPU, memory, ports, and container instance attributes).</p> </li> <li> <p>By default, the service scheduler attempts to balance tasks across Availability Zones in this manner (although you can choose a different placement strategy) with the <code>placementStrategy</code> parameter):</p> <ul> <li> <p>Sort the valid container instances, giving priority to instances that have the fewest number of running tasks for this service in their respective Availability Zone. For example, if zone A has one running service task and zones B and C each have zero, valid container instances in either zone B or C are considered optimal for placement.</p> </li> <li> <p>Place the new service task on a valid container instance in an optimal Availability Zone (based on the previous steps), favoring container instances with the fewest number of running tasks for this service.</p> </li> </ul> </li> </ul>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.CreateService",
      "responses": [
        {
          "uuid": "8d11baf8-500c-4166-b42a-094f6fe06329",
          "body": "{\n  \"service\": {\n    \"clusterArn\": \"arn:aws:ecs:us-east-1:012345678910:cluster/default\",\n    \"createdAt\": \"2016-08-29T16:02:54.884Z\",\n    \"deploymentConfiguration\": {\n      \"maximumPercent\": 200,\n      \"minimumHealthyPercent\": 100\n    },\n    \"deployments\": [\n      {\n        \"createdAt\": \"2016-08-29T16:02:54.884Z\",\n        \"desiredCount\": 10,\n        \"id\": \"ecs-svc/9223370564343000923\",\n        \"pendingCount\": 0,\n        \"runningCount\": 0,\n        \"status\": \"PRIMARY\",\n        \"taskDefinition\": \"arn:aws:ecs:us-east-1:012345678910:task-definition/console-sample-app-static:6\",\n        \"updatedAt\": \"2016-08-29T16:02:54.884Z\"\n      }\n    ],\n    \"desiredCount\": 10,\n    \"events\": [],\n    \"loadBalancers\": [\n      {\n        \"containerName\": \"simple-app\",\n        \"containerPort\": 80,\n        \"loadBalancerName\": \"EC2Contai-EcsElast-15DCDAURT3ZO2\"\n      }\n    ],\n    \"pendingCount\": 0,\n    \"roleArn\": \"arn:aws:iam::012345678910:role/ecsServiceRole\",\n    \"runningCount\": 0,\n    \"serviceArn\": \"arn:aws:ecs:us-east-1:012345678910:service/ecs-simple-service-elb\",\n    \"serviceName\": \"ecs-simple-service-elb\",\n    \"status\": \"ACTIVE\",\n    \"taskDefinition\": \"arn:aws:ecs:us-east-1:012345678910:task-definition/console-sample-app-static:6\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "1f26cc87-267c-47bd-b257-9512314ee76f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "0f4bd1a1-2f6d-4c24-b727-8ba15669c0a9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "6fce1b7e-cf5a-4daf-8924-83f4df3bb6bc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "b4ba8da4-5b0d-4806-ad70-9d208267405e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f6754733-8863-4e15-9301-267947b75031",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UnsupportedFeatureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "056f8c83-8653-4678-85eb-4b277590ce93",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "PlatformUnknownException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "93e9ba05-1ec5-4721-91c3-80b33a942651",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "PlatformTaskDefinitionIncompatibilityException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "fadb27fb-253a-4eb7-86c6-cfe5c6a98a34",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "AccessDeniedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "35c696cf-a755-4f72-b078-d363295bca27",
      "documentation": "Create a task set in the specified cluster and service. This is used when a service uses the <code>EXTERNAL</code> deployment controller type. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\">Amazon ECS Deployment Types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.CreateTaskSet",
      "responses": [
        {
          "uuid": "1e5b8d7c-920a-4cea-968b-7bcbd2727782",
          "body": "{\n  \"taskSet\": {\n    \"id\": \"\",\n    \"taskSetArn\": \"\",\n    \"serviceArn\": \"\",\n    \"clusterArn\": \"\",\n    \"startedBy\": \"\",\n    \"externalId\": \"\",\n    \"status\": \"\",\n    \"taskDefinition\": \"\",\n    \"computedDesiredCount\": {{faker 'datatype.number'}},\n    \"pendingCount\": {{faker 'datatype.number'}},\n    \"runningCount\": {{faker 'datatype.number'}},\n    \"createdAt\": \"{{faker 'date.recent' 365}}\",\n    \"updatedAt\": \"{{faker 'date.recent' 365}}\",\n    \"launchType\": \"\",\n    \"capacityProviderStrategy\": [\n      {\n        \"capacityProvider\": \"\",\n        \"weight\": {{faker 'datatype.number'}},\n        \"base\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"platformVersion\": \"\",\n    \"networkConfiguration\": {\n      \"awsvpcConfiguration\": {\n        \"subnets\": [\n          \"\"\n        ],\n        \"securityGroups\": [\n          \"\"\n        ],\n        \"assignPublicIp\": \"\"\n      }\n    },\n    \"loadBalancers\": [\n      {\n        \"targetGroupArn\": \"\",\n        \"loadBalancerName\": \"\",\n        \"containerName\": \"\",\n        \"containerPort\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"serviceRegistries\": [\n      {\n        \"registryArn\": \"\",\n        \"port\": {{faker 'datatype.number'}},\n        \"containerName\": \"\",\n        \"containerPort\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"scale\": {\n      \"value\": {{faker 'datatype.float'}},\n      \"unit\": \"\"\n    },\n    \"stabilityStatus\": \"\",\n    \"stabilityStatusAt\": \"{{faker 'date.recent' 365}}\",\n    \"tags\": [\n      {\n        \"key\": \"\",\n        \"value\": \"\"\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "eda1ea8d-49db-481e-a173-43225ed9a07c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "7dc2183d-1cc7-4008-9626-0bdddf006500",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "0f16baa3-fff6-478a-a209-7411ac332ade",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "5b41b914-dda6-4303-88ec-d45f101d6ae2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "c7904eb3-bdf5-45c9-a221-578d0e4bd727",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UnsupportedFeatureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "d782eee0-43f4-483b-a93a-9d3582d65253",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "PlatformUnknownException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "209e205c-2ea3-47cf-9c63-75daa123f7da",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "PlatformTaskDefinitionIncompatibilityException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "28977bb1-ce5a-4aa1-93f5-01f075d311a6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "AccessDeniedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "2994f437-7a47-4ddf-b962-c422162a27a0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 488,
          "label": "ServiceNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "cda8e99b-10e9-4888-96b6-f7a568267b83",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 489,
          "label": "ServiceNotActiveException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "d2555eb9-5e7a-4f6d-818a-9dcc75b641ff",
      "documentation": "Disables an account setting for a specified IAM user, IAM role, or the root user for an account.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteAccountSetting",
      "responses": [
        {
          "uuid": "a7fa9a5c-b44d-4cc0-8d6f-efb2f2ed123d",
          "body": "{\n  \"setting\": {\n    \"name\": \"containerInstanceLongArnFormat\",\n    \"value\": \"enabled\",\n    \"principalArn\": \"arn:aws:iam::<aws_account_id>:user/principalName\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "d215d688-7e04-4da8-8de2-bb85a3aa5f68",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "ae40430d-10c0-495f-bc2d-ec49b1f97ca5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "3de64dd5-65d7-44ca-bdc3-1620fc290ab8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "44944895-3403-44f4-bc3f-f2acf72144a6",
      "documentation": "Deletes one or more custom attributes from an Amazon ECS resource.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteAttributes",
      "responses": [
        {
          "uuid": "b50c745c-5def-4ffc-a94c-78cd8a6b3a18",
          "body": "{\n  \"attributes\": [\n    {\n      \"name\": \"\",\n      \"value\": \"\",\n      \"targetType\": \"\",\n      \"targetId\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "636e95aa-d103-4e4d-804a-1a3fb661c273",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "2c91e8d1-1ef7-4ffd-aa9e-4d560e127e25",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "TargetNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "e83d2b19-9d60-4a4a-96d8-f67a1e0427f7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "ebc7ccaf-e113-47f4-a97e-f0414e7f8c87",
      "documentation": "<p>Deletes the specified capacity provider.</p> <note> <p>The <code>FARGATE</code> and <code>FARGATE_SPOT</code> capacity providers are reserved and cannot be deleted. You can disassociate them from a cluster using either the <a>PutClusterCapacityProviders</a> API or by deleting the cluster.</p> </note> <p>Prior to a capacity provider being deleted, the capacity provider must be removed from the capacity provider strategy from all services. The <a>UpdateService</a> API can be used to remove a capacity provider from a service's capacity provider strategy. When updating a service, the <code>forceNewDeployment</code> option can be used to ensure that any tasks using the Amazon EC2 instance capacity provided by the capacity provider are transitioned to use the capacity from the remaining capacity providers. Only capacity providers that are not associated with a cluster can be deleted. To remove a capacity provider from a cluster, you can either use <a>PutClusterCapacityProviders</a> or delete the cluster.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteCapacityProvider",
      "responses": [
        {
          "uuid": "3fd8c150-f5f0-40f5-898d-6cb9dbd7491b",
          "body": "{\n  \"capacityProvider\": {\n    \"capacityProviderArn\": \"\",\n    \"name\": \"\",\n    \"status\": \"\",\n    \"autoScalingGroupProvider\": {\n      \"autoScalingGroupArn\": \"\",\n      \"managedScaling\": {\n        \"status\": \"\",\n        \"targetCapacity\": {{faker 'datatype.number'}},\n        \"minimumScalingStepSize\": {{faker 'datatype.number'}},\n        \"maximumScalingStepSize\": {{faker 'datatype.number'}},\n        \"instanceWarmupPeriod\": {{faker 'datatype.number'}}\n      },\n      \"managedTerminationProtection\": \"\"\n    },\n    \"updateStatus\": \"\",\n    \"updateStatusReason\": \"\",\n    \"tags\": [\n      {\n        \"key\": \"\",\n        \"value\": \"\"\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "e072b909-6652-476c-a7bb-761a90fdf478",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "0c7476ef-fcca-4c84-9571-1db8d8612bd9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "a3b953be-3646-400d-86d2-923fa4409f63",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "41564d35-05b6-4a3e-b6f4-ead70b9ad222",
      "documentation": "<p>Deletes the specified cluster. The cluster will transition to the <code>INACTIVE</code> state. Clusters with an <code>INACTIVE</code> status may remain discoverable in your account for a period of time. However, this behavior is subject to change in the future, so you should not rely on <code>INACTIVE</code> clusters persisting.</p> <p>You must deregister all container instances from this cluster before you may delete it. You can list the container instances in a cluster with <a>ListContainerInstances</a> and deregister them with <a>DeregisterContainerInstance</a>.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteCluster",
      "responses": [
        {
          "uuid": "5210989e-1a28-4119-869b-2677463aba78",
          "body": "{\n  \"cluster\": {\n    \"activeServicesCount\": 0,\n    \"clusterArn\": \"arn:aws:ecs:us-east-1:012345678910:cluster/my_cluster\",\n    \"clusterName\": \"my_cluster\",\n    \"pendingTasksCount\": 0,\n    \"registeredContainerInstancesCount\": 0,\n    \"runningTasksCount\": 0,\n    \"status\": \"INACTIVE\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "3c5ce522-c1df-4c60-a178-fabe7960bf6e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "d9202ca7-4677-4a09-b935-afc2bde701d9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "b2eb3017-afb2-45e1-b161-41bf9c6eed2d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "50091677-73cc-40e8-8f6b-34733958e7e7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f5d22e97-a8bc-41cd-814c-1cb7daee5977",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ClusterContainsContainerInstancesException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "6c6e3079-8848-46e3-b538-59622513f090",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ClusterContainsServicesException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "66fa90d2-8d74-408b-a85d-a263dcc791c2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "ClusterContainsTasksException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f33cfd54-a18a-43b9-a943-2c601ab8e5a4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "UpdateInProgressException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "57dd94e6-da79-4b1d-93ce-095033d22e50",
      "documentation": "<p>Deletes a specified service within a cluster. You can delete a service if you have no running tasks in it and the desired task count is zero. If the service is actively maintaining tasks, you cannot delete it, and you must update the service to a desired task count of zero. For more information, see <a>UpdateService</a>.</p> <note> <p>When you delete a service, if there are still running tasks that require cleanup, the service status moves from <code>ACTIVE</code> to <code>DRAINING</code>, and the service is no longer visible in the console or in the <a>ListServices</a> API operation. After all tasks have transitioned to either <code>STOPPING</code> or <code>STOPPED</code> status, the service status moves from <code>DRAINING</code> to <code>INACTIVE</code>. Services in the <code>DRAINING</code> or <code>INACTIVE</code> status can still be viewed with the <a>DescribeServices</a> API operation. However, in the future, <code>INACTIVE</code> services may be cleaned up and purged from Amazon ECS record keeping, and <a>DescribeServices</a> calls on those services return a <code>ServiceNotFoundException</code> error.</p> </note> <important> <p>If you attempt to create a new service with the same name as an existing service in either <code>ACTIVE</code> or <code>DRAINING</code> status, you receive an error.</p> </important>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteService",
      "responses": [
        {
          "uuid": "53cbf74f-72dd-4fda-855b-eaf0225a56fe",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "e47b282d-719d-4188-8c0d-6459a096ac22",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "245812ac-b5da-4430-84f0-9bceaebf0d1f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "db0909b7-5aa4-4f39-b36a-8bee03186fdd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "b7e75e93-301b-4b6a-ad1a-dd08f122743b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "180b618a-2f03-40f5-a227-f36d5035de96",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ServiceNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "9c2d4e9e-f9d0-4798-bf06-92d84552f30c",
      "documentation": "Deletes a specified task set within a service. This is used when a service uses the <code>EXTERNAL</code> deployment controller type. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\">Amazon ECS Deployment Types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeleteTaskSet",
      "responses": [
        {
          "uuid": "e040e18a-d70f-40ea-99dc-b7a5975af7e9",
          "body": "{\n  \"taskSet\": {\n    \"id\": \"\",\n    \"taskSetArn\": \"\",\n    \"serviceArn\": \"\",\n    \"clusterArn\": \"\",\n    \"startedBy\": \"\",\n    \"externalId\": \"\",\n    \"status\": \"\",\n    \"taskDefinition\": \"\",\n    \"computedDesiredCount\": {{faker 'datatype.number'}},\n    \"pendingCount\": {{faker 'datatype.number'}},\n    \"runningCount\": {{faker 'datatype.number'}},\n    \"createdAt\": \"{{faker 'date.recent' 365}}\",\n    \"updatedAt\": \"{{faker 'date.recent' 365}}\",\n    \"launchType\": \"\",\n    \"capacityProviderStrategy\": [\n      {\n        \"capacityProvider\": \"\",\n        \"weight\": {{faker 'datatype.number'}},\n        \"base\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"platformVersion\": \"\",\n    \"networkConfiguration\": {\n      \"awsvpcConfiguration\": {\n        \"subnets\": [\n          \"\"\n        ],\n        \"securityGroups\": [\n          \"\"\n        ],\n        \"assignPublicIp\": \"\"\n      }\n    },\n    \"loadBalancers\": [\n      {\n        \"targetGroupArn\": \"\",\n        \"loadBalancerName\": \"\",\n        \"containerName\": \"\",\n        \"containerPort\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"serviceRegistries\": [\n      {\n        \"registryArn\": \"\",\n        \"port\": {{faker 'datatype.number'}},\n        \"containerName\": \"\",\n        \"containerPort\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"scale\": {\n      \"value\": {{faker 'datatype.float'}},\n      \"unit\": \"\"\n    },\n    \"stabilityStatus\": \"\",\n    \"stabilityStatusAt\": \"{{faker 'date.recent' 365}}\",\n    \"tags\": [\n      {\n        \"key\": \"\",\n        \"value\": \"\"\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "0eb694c8-38b8-461b-820f-bb80e49c7418",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "8f1d719d-e96b-4d58-a0ba-206e3699b278",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "47d51344-bd3c-4015-9eda-6d38bb58c214",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "12d79be6-6515-4339-8b29-21ac0ae74899",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "e9dfdbc2-e29f-4587-9715-4ce339317ee7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UnsupportedFeatureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "c751c693-6e17-470c-adc7-947c8f8f2cd2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "AccessDeniedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "97307298-2f68-43c1-b727-c2ae0d0b06a6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "ServiceNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "1ab798f2-63a3-44ea-b0d5-d47efcc92452",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "ServiceNotActiveException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "666327f5-99ff-4691-b1ca-aabffae24863",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 488,
          "label": "TaskSetNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "797ce789-f694-4e38-af20-5f3cd261f2d3",
      "documentation": "<p>Deregisters an Amazon ECS container instance from the specified cluster. This instance is no longer available to run tasks.</p> <p>If you intend to use the container instance for some other purpose after deregistration, you should stop all of the tasks running on the container instance before deregistration. That prevents any orphaned tasks from consuming resources.</p> <p>Deregistering a container instance removes the instance from a cluster, but it does not terminate the EC2 instance. If you are finished using the instance, be sure to terminate it in the Amazon EC2 console to stop billing.</p> <note> <p>If you terminate a running container instance, Amazon ECS automatically deregisters the instance from your cluster (stopped container instances or instances with disconnected agents are not automatically deregistered when terminated).</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeregisterContainerInstance",
      "responses": [
        {
          "uuid": "c63300c7-9b23-4664-869e-c082720b35e7",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "2204e1e1-cbc5-4f12-8db4-bd44959c840b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "d24bb90b-37c1-4f22-91a0-e8f812c42dd2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "dcfdf764-ecdd-4fae-aefa-5bcd39dde7c2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "cf460d56-0047-4887-b596-bca0fac88fb3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "f4bffcea-fd3b-4da7-ac74-0ac6bfca590f",
      "documentation": "<p>Deregisters the specified task definition by family and revision. Upon deregistration, the task definition is marked as <code>INACTIVE</code>. Existing tasks and services that reference an <code>INACTIVE</code> task definition continue to run without disruption. Existing services that reference an <code>INACTIVE</code> task definition can still scale up or down by modifying the service's desired count.</p> <p>You cannot use an <code>INACTIVE</code> task definition to run new tasks or create new services, and you cannot update an existing service to reference an <code>INACTIVE</code> task definition. However, there may be up to a 10-minute window following deregistration where these restrictions have not yet taken effect.</p> <note> <p>At this time, <code>INACTIVE</code> task definitions remain discoverable in your account indefinitely. However, this behavior is subject to change in the future, so you should not rely on <code>INACTIVE</code> task definitions persisting beyond the lifecycle of any associated tasks and services.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DeregisterTaskDefinition",
      "responses": [
        {
          "uuid": "5560741e-0b2f-4f39-9b1b-b65ed65abde0",
          "body": "{\n  \"taskDefinition\": {\n    \"taskDefinitionArn\": \"\",\n    \"containerDefinitions\": [\n      {\n        \"name\": \"\",\n        \"image\": \"\",\n        \"repositoryCredentials\": {\n          \"credentialsParameter\": \"\"\n        },\n        \"cpu\": {{faker 'datatype.number'}},\n        \"memory\": {{faker 'datatype.number'}},\n        \"memoryReservation\": {{faker 'datatype.number'}},\n        \"links\": [\n          \"\"\n        ],\n        \"portMappings\": [\n          {\n            \"containerPort\": {{faker 'datatype.number'}},\n            \"hostPort\": {{faker 'datatype.number'}},\n            \"protocol\": \"\"\n          }\n        ],\n        \"essential\": {{faker 'datatype.boolean'}},\n        \"entryPoint\": [\n          \"\"\n        ],\n        \"command\": [\n          \"\"\n        ],\n        \"environment\": [\n          {\n            \"name\": \"\",\n            \"value\": \"\"\n          }\n        ],\n        \"environmentFiles\": [\n          {\n            \"value\": \"\",\n            \"type\": \"\"\n          }\n        ],\n        \"mountPoints\": [\n          {\n            \"sourceVolume\": \"\",\n            \"containerPath\": \"\",\n            \"readOnly\": {{faker 'datatype.boolean'}}\n          }\n        ],\n        \"volumesFrom\": [\n          {\n            \"sourceContainer\": \"\",\n            \"readOnly\": {{faker 'datatype.boolean'}}\n          }\n        ],\n        \"linuxParameters\": {\n          \"capabilities\": {\n            \"add\": [\n              \"\"\n            ],\n            \"drop\": [\n              \"\"\n            ]\n          },\n          \"devices\": [\n            {\n              \"hostPath\": \"\",\n              \"containerPath\": \"\",\n              \"permissions\": [\n                \"{{oneOf (array 'read' 'write' 'mknod')}}\"\n              ]\n            }\n          ],\n          \"initProcessEnabled\": {{faker 'datatype.boolean'}},\n          \"sharedMemorySize\": {{faker 'datatype.number'}},\n          \"tmpfs\": [\n            {\n              \"containerPath\": \"\",\n              \"size\": {{faker 'datatype.number'}},\n              \"mountOptions\": [\n                \"\"\n              ]\n            }\n          ],\n          \"maxSwap\": {{faker 'datatype.number'}},\n          \"swappiness\": {{faker 'datatype.number'}}\n        },\n        \"secrets\": [\n          {\n            \"name\": \"\",\n            \"valueFrom\": \"\"\n          }\n        ],\n        \"dependsOn\": [\n          {\n            \"containerName\": \"\",\n            \"condition\": \"\"\n          }\n        ],\n        \"startTimeout\": {{faker 'datatype.number'}},\n        \"stopTimeout\": {{faker 'datatype.number'}},\n        \"hostname\": \"\",\n        \"user\": \"\",\n        \"workingDirectory\": \"\",\n        \"disableNetworking\": {{faker 'datatype.boolean'}},\n        \"privileged\": {{faker 'datatype.boolean'}},\n        \"readonlyRootFilesystem\": {{faker 'datatype.boolean'}},\n        \"dnsServers\": [\n          \"\"\n        ],\n        \"dnsSearchDomains\": [\n          \"\"\n        ],\n        \"extraHosts\": [\n          {\n            \"hostname\": \"\",\n            \"ipAddress\": \"\"\n          }\n        ],\n        \"dockerSecurityOptions\": [\n          \"\"\n        ],\n        \"interactive\": {{faker 'datatype.boolean'}},\n        \"pseudoTerminal\": {{faker 'datatype.boolean'}},\n        \"dockerLabels\": {},\n        \"ulimits\": [\n          {\n            \"name\": \"\",\n            \"softLimit\": {{faker 'datatype.number'}},\n            \"hardLimit\": {{faker 'datatype.number'}}\n          }\n        ],\n        \"logConfiguration\": {\n          \"logDriver\": \"\",\n          \"options\": {},\n          \"secretOptions\": [\n            {\n              \"name\": \"\",\n              \"valueFrom\": \"\"\n            }\n          ]\n        },\n        \"healthCheck\": {\n          \"command\": [\n            \"\"\n          ],\n          \"interval\": {{faker 'datatype.number'}},\n          \"timeout\": {{faker 'datatype.number'}},\n          \"retries\": {{faker 'datatype.number'}},\n          \"startPeriod\": {{faker 'datatype.number'}}\n        },\n        \"systemControls\": [\n          {\n            \"namespace\": \"\",\n            \"value\": \"\"\n          }\n        ],\n        \"resourceRequirements\": [\n          {\n            \"value\": \"\",\n            \"type\": \"\"\n          }\n        ],\n        \"firelensConfiguration\": {\n          \"type\": \"\",\n          \"options\": {}\n        }\n      }\n    ],\n    \"family\": \"\",\n    \"taskRoleArn\": \"\",\n    \"executionRoleArn\": \"\",\n    \"networkMode\": \"\",\n    \"revision\": {{faker 'datatype.number'}},\n    \"volumes\": [\n      {\n        \"name\": \"\",\n        \"host\": {\n          \"sourcePath\": \"\"\n        },\n        \"dockerVolumeConfiguration\": {\n          \"scope\": \"\",\n          \"autoprovision\": {{faker 'datatype.boolean'}},\n          \"driver\": \"\",\n          \"driverOpts\": {},\n          \"labels\": {}\n        },\n        \"efsVolumeConfiguration\": {\n          \"fileSystemId\": \"\",\n          \"rootDirectory\": \"\",\n          \"transitEncryption\": \"\",\n          \"transitEncryptionPort\": {{faker 'datatype.number'}},\n          \"authorizationConfig\": {\n            \"accessPointId\": \"\",\n            \"iam\": \"\"\n          }\n        },\n        \"fsxWindowsFileServerVolumeConfiguration\": {\n          \"fileSystemId\": \"\",\n          \"rootDirectory\": \"\",\n          \"authorizationConfig\": {\n            \"credentialsParameter\": \"\",\n            \"domain\": \"\"\n          }\n        }\n      }\n    ],\n    \"status\": \"\",\n    \"requiresAttributes\": [\n      {\n        \"name\": \"\",\n        \"value\": \"\",\n        \"targetType\": \"\",\n        \"targetId\": \"\"\n      }\n    ],\n    \"placementConstraints\": [\n      {\n        \"type\": \"\",\n        \"expression\": \"\"\n      }\n    ],\n    \"compatibilities\": [\n      \"{{oneOf (array 'EC2' 'FARGATE' 'EXTERNAL')}}\"\n    ],\n    \"requiresCompatibilities\": [\n      \"{{oneOf (array 'EC2' 'FARGATE' 'EXTERNAL')}}\"\n    ],\n    \"cpu\": \"\",\n    \"memory\": \"\",\n    \"inferenceAccelerators\": [\n      {\n        \"deviceName\": \"\",\n        \"deviceType\": \"\"\n      }\n    ],\n    \"pidMode\": \"\",\n    \"ipcMode\": \"\",\n    \"proxyConfiguration\": {\n      \"type\": \"\",\n      \"containerName\": \"\",\n      \"properties\": \"\"\n    },\n    \"registeredAt\": \"{{faker 'date.recent' 365}}\",\n    \"deregisteredAt\": \"{{faker 'date.recent' 365}}\",\n    \"registeredBy\": \"\",\n    \"ephemeralStorage\": {\n      \"sizeInGiB\": {{faker 'datatype.number'}}\n    }\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "9a2641f7-74f3-4d2a-8ee9-798557133785",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "38aa80a5-fbb3-419d-a541-4e1ec9a45915",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "2e6913e7-593a-4c88-af3c-6bb493c99f38",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "df33aab7-170e-433d-b0c5-a8390852ab90",
      "documentation": "Describes one or more of your capacity providers.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeCapacityProviders",
      "responses": [
        {
          "uuid": "a27cd04a-075e-4fd9-aca6-61740a4d29ea",
          "body": "{\n  \"capacityProviders\": [\n    {\n      \"capacityProviderArn\": \"\",\n      \"name\": \"\",\n      \"status\": \"\",\n      \"autoScalingGroupProvider\": {\n        \"autoScalingGroupArn\": \"\",\n        \"managedScaling\": {\n          \"status\": \"\",\n          \"targetCapacity\": {{faker 'datatype.number'}},\n          \"minimumScalingStepSize\": {{faker 'datatype.number'}},\n          \"maximumScalingStepSize\": {{faker 'datatype.number'}},\n          \"instanceWarmupPeriod\": {{faker 'datatype.number'}}\n        },\n        \"managedTerminationProtection\": \"\"\n      },\n      \"updateStatus\": \"\",\n      \"updateStatusReason\": \"\",\n      \"tags\": [\n        {\n          \"key\": \"\",\n          \"value\": \"\"\n        }\n      ]\n    }\n  ],\n  \"failures\": [\n    {\n      \"arn\": \"\",\n      \"reason\": \"\",\n      \"detail\": \"\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "c4308bfe-7052-48f7-8654-00ba70d27b40",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f3cda27e-b12f-4c40-a3c5-d6601bc40cd4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "cea80bd3-7820-4473-9899-e21906ca6a4a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "7306ded5-16cd-4f4b-a2a4-b59a59422aec",
      "documentation": "Describes one or more of your clusters.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeClusters",
      "responses": [
        {
          "uuid": "2f033c8e-d683-432e-992d-091137670f61",
          "body": "{\n  \"clusters\": [\n    {\n      \"clusterArn\": \"arn:aws:ecs:us-east-1:aws_account_id:cluster/default\",\n      \"clusterName\": \"default\",\n      \"status\": \"ACTIVE\"\n    }\n  ],\n  \"failures\": []\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "6c839b65-42e5-4f98-8744-cfd491a8c325",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "85b3dd73-4c98-4c9c-9270-b0c8e5de9252",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "4ee7185a-e1ab-478e-9817-1bbe325aef16",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "e351be0e-f5c2-4cbe-92e8-53fcca74af2f",
      "documentation": "Describes one or more container instances. Returns metadata about each container instance requested.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeContainerInstances",
      "responses": [
        {
          "uuid": "4f69f31c-f079-4349-96e1-347f8c1905d1",
          "body": "{\n  \"containerInstances\": [\n    {\n      \"agentConnected\": true,\n      \"containerInstanceArn\": \"arn:aws:ecs:us-east-1:012345678910:container-instance/f2756532-8f13-4d53-87c9-aed50dc94cd7\",\n      \"ec2InstanceId\": \"i-807f3249\",\n      \"pendingTasksCount\": 0,\n      \"registeredResources\": [\n        {\n          \"name\": \"CPU\",\n          \"type\": \"INTEGER\",\n          \"doubleValue\": 0,\n          \"integerValue\": 2048,\n          \"longValue\": 0\n        },\n        {\n          \"name\": \"MEMORY\",\n          \"type\": \"INTEGER\",\n          \"doubleValue\": 0,\n          \"integerValue\": 3768,\n          \"longValue\": 0\n        },\n        {\n          \"name\": \"PORTS\",\n          \"type\": \"STRINGSET\",\n          \"doubleValue\": 0,\n          \"integerValue\": 0,\n          \"longValue\": 0,\n          \"stringSetValue\": [\n            \"2376\",\n            \"22\",\n            \"51678\",\n            \"2375\"\n          ]\n        }\n      ],\n      \"remainingResources\": [\n        {\n          \"name\": \"CPU\",\n          \"type\": \"INTEGER\",\n          \"doubleValue\": 0,\n          \"integerValue\": 1948,\n          \"longValue\": 0\n        },\n        {\n          \"name\": \"MEMORY\",\n          \"type\": \"INTEGER\",\n          \"doubleValue\": 0,\n          \"integerValue\": 3668,\n          \"longValue\": 0\n        },\n        {\n          \"name\": \"PORTS\",\n          \"type\": \"STRINGSET\",\n          \"doubleValue\": 0,\n          \"integerValue\": 0,\n          \"longValue\": 0,\n          \"stringSetValue\": [\n            \"2376\",\n            \"22\",\n            \"80\",\n            \"51678\",\n            \"2375\"\n          ]\n        }\n      ],\n      \"runningTasksCount\": 1,\n      \"status\": \"ACTIVE\"\n    }\n  ],\n  \"failures\": []\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "7398279b-6e9a-4281-9cf8-4373380e271d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "a2d21114-e2db-4862-a376-9954d743c037",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "7368e2a3-cbd8-49ec-ab24-65b0b50d57be",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "3745adf7-524a-4447-a0b4-4f3071e790c8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "4cc26de2-6738-4353-a85e-470a6803e126",
      "documentation": "Describes the specified services running in your cluster.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeServices",
      "responses": [
        {
          "uuid": "fe84e0db-b215-4fd0-a52f-0a8ac7460544",
          "body": "{\n  \"failures\": [],\n  \"services\": [\n    {\n      \"clusterArn\": \"arn:aws:ecs:us-east-1:012345678910:cluster/default\",\n      \"createdAt\": \"2016-08-29T16:25:52.130Z\",\n      \"deploymentConfiguration\": {\n        \"maximumPercent\": 200,\n        \"minimumHealthyPercent\": 100\n      },\n      \"deployments\": [\n        {\n          \"createdAt\": \"2016-08-29T16:25:52.130Z\",\n          \"desiredCount\": 1,\n          \"id\": \"ecs-svc/9223370564341623665\",\n          \"pendingCount\": 0,\n          \"runningCount\": 0,\n          \"status\": \"PRIMARY\",\n          \"taskDefinition\": \"arn:aws:ecs:us-east-1:012345678910:task-definition/hello_world:6\",\n          \"updatedAt\": \"2016-08-29T16:25:52.130Z\"\n        }\n      ],\n      \"desiredCount\": 1,\n      \"events\": [\n        {\n          \"createdAt\": \"2016-08-29T16:25:58.520Z\",\n          \"id\": \"38c285e5-d335-4b68-8b15-e46dedc8e88d\",\n          \"message\": \"(service ecs-simple-service) was unable to place a task because no container instance met all of its requirements. The closest matching (container-instance 3f4de1c5-ffdd-4954-af7e-75b4be0c8841) is already using a port required by your task. For more information, see the Troubleshooting section of the Amazon ECS Developer Guide.\"\n        }\n      ],\n      \"loadBalancers\": [],\n      \"pendingCount\": 0,\n      \"runningCount\": 0,\n      \"serviceArn\": \"arn:aws:ecs:us-east-1:012345678910:service/ecs-simple-service\",\n      \"serviceName\": \"ecs-simple-service\",\n      \"status\": \"ACTIVE\",\n      \"taskDefinition\": \"arn:aws:ecs:us-east-1:012345678910:task-definition/hello_world:6\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "e88d9e68-32bf-44ec-827d-78cd03361eb3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "e1504800-1fca-4376-a7dc-cbd538ebd503",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "656938ee-1647-494c-acab-54af534bf2f3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "48b00882-90f6-4cee-b811-29c6c48169c0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "e26019c6-70be-4fda-bd6a-012a9061bf21",
      "documentation": "<p>Describes a task definition. You can specify a <code>family</code> and <code>revision</code> to find information about a specific task definition, or you can simply specify the family to find the latest <code>ACTIVE</code> revision in that family.</p> <note> <p>You can only describe <code>INACTIVE</code> task definitions while an active task or service references them.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeTaskDefinition",
      "responses": [
        {
          "uuid": "229854b5-6ee7-4eb7-8a4b-fcab2b5cb17f",
          "body": "{\n  \"taskDefinition\": {\n    \"containerDefinitions\": [\n      {\n        \"name\": \"wordpress\",\n        \"cpu\": 10,\n        \"environment\": [],\n        \"essential\": true,\n        \"image\": \"wordpress\",\n        \"links\": [\n          \"mysql\"\n        ],\n        \"memory\": 500,\n        \"mountPoints\": [],\n        \"portMappings\": [\n          {\n            \"containerPort\": 80,\n            \"hostPort\": 80\n          }\n        ],\n        \"volumesFrom\": []\n      },\n      {\n        \"name\": \"mysql\",\n        \"cpu\": 10,\n        \"environment\": [\n          {\n            \"name\": \"MYSQL_ROOT_PASSWORD\",\n            \"value\": \"password\"\n          }\n        ],\n        \"essential\": true,\n        \"image\": \"mysql\",\n        \"memory\": 500,\n        \"mountPoints\": [],\n        \"portMappings\": [],\n        \"volumesFrom\": []\n      }\n    ],\n    \"family\": \"hello_world\",\n    \"revision\": 8,\n    \"taskDefinitionArn\": \"arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/hello_world:8\",\n    \"volumes\": []\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "b7efb53a-7592-4bd5-95d7-3c22b8002426",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "ce682031-0145-48f6-a389-4fe9d865b428",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "d4c89407-e2a6-4560-a5bf-fbfea1b15110",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "1acb0bc3-1d1e-415f-ab97-f559c31845c4",
      "documentation": "Describes the task sets in the specified cluster and service. This is used when a service uses the <code>EXTERNAL</code> deployment controller type. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\">Amazon ECS Deployment Types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeTaskSets",
      "responses": [
        {
          "uuid": "c9320407-7ff1-44a8-95e2-6e31b570b033",
          "body": "{\n  \"taskSets\": [\n    {\n      \"id\": \"\",\n      \"taskSetArn\": \"\",\n      \"serviceArn\": \"\",\n      \"clusterArn\": \"\",\n      \"startedBy\": \"\",\n      \"externalId\": \"\",\n      \"status\": \"\",\n      \"taskDefinition\": \"\",\n      \"computedDesiredCount\": {{faker 'datatype.number'}},\n      \"pendingCount\": {{faker 'datatype.number'}},\n      \"runningCount\": {{faker 'datatype.number'}},\n      \"createdAt\": \"{{faker 'date.recent' 365}}\",\n      \"updatedAt\": \"{{faker 'date.recent' 365}}\",\n      \"launchType\": \"\",\n      \"capacityProviderStrategy\": [\n        {\n          \"capacityProvider\": \"\",\n          \"weight\": {{faker 'datatype.number'}},\n          \"base\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"platformVersion\": \"\",\n      \"networkConfiguration\": {\n        \"awsvpcConfiguration\": {\n          \"subnets\": [\n            \"\"\n          ],\n          \"securityGroups\": [\n            \"\"\n          ],\n          \"assignPublicIp\": \"\"\n        }\n      },\n      \"loadBalancers\": [\n        {\n          \"targetGroupArn\": \"\",\n          \"loadBalancerName\": \"\",\n          \"containerName\": \"\",\n          \"containerPort\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"serviceRegistries\": [\n        {\n          \"registryArn\": \"\",\n          \"port\": {{faker 'datatype.number'}},\n          \"containerName\": \"\",\n          \"containerPort\": {{faker 'datatype.number'}}\n        }\n      ],\n      \"scale\": {\n        \"value\": {{faker 'datatype.float'}},\n        \"unit\": \"\"\n      },\n      \"stabilityStatus\": \"\",\n      \"stabilityStatusAt\": \"{{faker 'date.recent' 365}}\",\n      \"tags\": [\n        {\n          \"key\": \"\",\n          \"value\": \"\"\n        }\n      ]\n    }\n  ],\n  \"failures\": [\n    {\n      \"arn\": \"\",\n      \"reason\": \"\",\n      \"detail\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "fe8de2b7-6006-4c5f-ab3c-89912bc6382e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f7a4a2a7-4bc9-4d0d-9502-8037497b15f8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "8e2d08c7-18b1-4a98-b36c-5bd4103efcf8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "d7c6799c-5bda-48c6-afe3-6f6e3f08ec56",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "9a35d259-f872-43d6-80f8-918fc64ab3c1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UnsupportedFeatureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "e7bbabe6-305b-408c-991b-a3fbeae52ef0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "AccessDeniedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "dbd4bb8b-b3ab-45b6-8dc6-8e72ecc1f198",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "ServiceNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "c3c0b988-8769-41b9-9427-fe676ab7db37",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "ServiceNotActiveException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "246ab262-8688-48fa-a2e6-425669e92f68",
      "documentation": "Describes a specified task or tasks.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DescribeTasks",
      "responses": [
        {
          "uuid": "a285b316-a56e-4622-b801-de2e26896075",
          "body": "{\n  \"failures\": [],\n  \"tasks\": [\n    {\n      \"clusterArn\": \"arn:aws:ecs:<region>:<aws_account_id>:cluster/default\",\n      \"containerInstanceArn\": \"arn:aws:ecs:<region>:<aws_account_id>:container-instance/18f9eda5-27d7-4c19-b133-45adc516e8fb\",\n      \"containers\": [\n        {\n          \"name\": \"ecs-demo\",\n          \"containerArn\": \"arn:aws:ecs:<region>:<aws_account_id>:container/7c01765b-c588-45b3-8290-4ba38bd6c5a6\",\n          \"lastStatus\": \"RUNNING\",\n          \"networkBindings\": [\n            {\n              \"bindIP\": \"0.0.0.0\",\n              \"containerPort\": 80,\n              \"hostPort\": 80\n            }\n          ],\n          \"taskArn\": \"arn:aws:ecs:<region>:<aws_account_id>:task/c5cba4eb-5dad-405e-96db-71ef8eefe6a8\"\n        }\n      ],\n      \"desiredStatus\": \"RUNNING\",\n      \"lastStatus\": \"RUNNING\",\n      \"overrides\": {\n        \"containerOverrides\": [\n          {\n            \"name\": \"ecs-demo\"\n          }\n        ]\n      },\n      \"startedBy\": \"ecs-svc/9223370608528463088\",\n      \"taskArn\": \"arn:aws:ecs:<region>:<aws_account_id>:task/c5cba4eb-5dad-405e-96db-71ef8eefe6a8\",\n      \"taskDefinitionArn\": \"arn:aws:ecs:<region>:<aws_account_id>:task-definition/amazon-ecs-sample:1\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "908632bd-bfd6-405a-a3cf-567ce36b7f52",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "3f8105b9-b8b6-4ff2-b79e-4993a2e7845b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "b2953fca-a580-46a1-999e-562982ccc053",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "94122fb4-562a-489a-851a-399a7e8e7e0e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "3e531a9d-3f43-40eb-ad9d-3cf40f9ebfc4",
      "documentation": "<note> <p>This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.</p> </note> <p>Returns an endpoint for the Amazon ECS agent to poll for updates.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.DiscoverPollEndpoint",
      "responses": [
        {
          "uuid": "ddfa1de0-97c8-4b55-8896-8ba3d331dbca",
          "body": "{\n  \"endpoint\": \"\",\n  \"telemetryEndpoint\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "8d7325fc-3fec-4434-a5fc-3fd09cc29d7e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "62954f3b-8e60-4a55-a02c-c220514bacd7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "4bd32559-16bf-4792-abe9-d68be87524bd",
      "documentation": "Runs a command remotely on a container within a task.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ExecuteCommand",
      "responses": [
        {
          "uuid": "3dbb8abe-3aac-4ac7-9f0f-8688ecc55b0f",
          "body": "{\n  \"clusterArn\": \"\",\n  \"containerArn\": \"\",\n  \"containerName\": \"\",\n  \"interactive\": {{faker 'datatype.boolean'}},\n  \"session\": {\n    \"sessionId\": \"\",\n    \"streamUrl\": \"\",\n    \"tokenValue\": \"\"\n  },\n  \"taskArn\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "b0461466-591a-4467-96ad-fc298b35d84c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "ef82911d-c4a6-4483-94b1-2e44d73af963",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "6c335b4b-4447-4799-bb75-a52e31b467b1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "2d18ac1a-7fa8-4c1f-a927-1b6d1aa70e64",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "AccessDeniedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "daff2b5a-ddac-43f2-8292-1106bba86beb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "c426b7e0-ab89-4938-a62a-62de01b49206",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "TargetNotConnectedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "af6fdacb-1d8f-412d-aa2c-8102f330f7ea",
      "documentation": "Lists the account settings for a specified principal.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListAccountSettings",
      "responses": [
        {
          "uuid": "12e9efd2-0053-46d4-b702-471c9dc41ecf",
          "body": "{\n  \"settings\": [\n    {\n      \"name\": \"containerInstanceLongArnFormat\",\n      \"value\": \"disabled\",\n      \"principalArn\": \"arn:aws:iam::<aws_account_id>:user/principalName\"\n    },\n    {\n      \"name\": \"serviceLongArnFormat\",\n      \"value\": \"enabled\",\n      \"principalArn\": \"arn:aws:iam::<aws_account_id>:user/principalName\"\n    },\n    {\n      \"name\": \"taskLongArnFormat\",\n      \"value\": \"disabled\",\n      \"principalArn\": \"arn:aws:iam::<aws_account_id>:user/principalName\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "9e1b96ec-611b-44b3-8591-452f57df3a9a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "55681af3-ed1d-4c76-80a1-9dac9bec4df5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "65c8989c-966f-4ec6-8519-ce08ac1cf5a8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "e161e02a-e4f0-4f8a-9c9b-616f18c2087b",
      "documentation": "Lists the attributes for Amazon ECS resources within a specified target type and cluster. When you specify a target type and cluster, <code>ListAttributes</code> returns a list of attribute objects, one for each attribute on each resource. You can filter the list of results to a single attribute name to only return results that have that name. You can also filter the results by attribute name and value, for example, to see which container instances in a cluster are running a Linux AMI (<code>ecs.os-type=linux</code>). ",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListAttributes",
      "responses": [
        {
          "uuid": "5b553481-52f9-452f-91fa-aff5ff182f1a",
          "body": "{\n  \"attributes\": [\n    {\n      \"name\": \"\",\n      \"value\": \"\",\n      \"targetType\": \"\",\n      \"targetId\": \"\"\n    }\n  ],\n  \"nextToken\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "350845d7-1776-4cbd-af72-5f4c8d2f11d2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "a09cfa2d-6d19-4f67-a8fb-e846495d7c49",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "2eb44c91-150c-49a5-b7db-26dd25c3f96b",
      "documentation": "Returns a list of existing clusters.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListClusters",
      "responses": [
        {
          "uuid": "ea9f2b0c-a828-4f01-933f-6b9f1b3f0746",
          "body": "{\n  \"clusterArns\": [\n    \"arn:aws:ecs:us-east-1:<aws_account_id>:cluster/test\",\n    \"arn:aws:ecs:us-east-1:<aws_account_id>:cluster/default\"\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "887d53e8-ddd7-47d9-a619-2210509b2b11",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "32b4b1fa-e79c-4ab1-aec8-b1ea87fbc02d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "80bab4fd-2056-402f-b1da-7f73acc575e1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "82fee077-9b13-4797-9457-d3818c5bc984",
      "documentation": "Returns a list of container instances in a specified cluster. You can filter the results of a <code>ListContainerInstances</code> operation with cluster query language statements inside the <code>filter</code> parameter. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html\">Cluster Query Language</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListContainerInstances",
      "responses": [
        {
          "uuid": "81cbdfd9-870c-48af-904e-1c5be21bdce1",
          "body": "{\n  \"containerInstanceArns\": [\n    \"arn:aws:ecs:us-east-1:<aws_account_id>:container-instance/f6bbb147-5370-4ace-8c73-c7181ded911f\",\n    \"arn:aws:ecs:us-east-1:<aws_account_id>:container-instance/ffe3d344-77e2-476c-a4d0-bf560ad50acb\"\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "92cc7e10-af5e-43ba-bec9-ae1cd6ad8cd0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "0f579600-6eee-47bf-b608-1ae88820b012",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "fc6e3463-3a2f-49b5-a767-bfb6d6e762d5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "8384cbf0-7c5f-4f4e-817f-c5d70aecd9fa",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "e77e7d1f-fa7b-439b-a6bd-5717174a4965",
      "documentation": "Returns a list of services. You can filter the results by cluster, launch type, and scheduling strategy.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListServices",
      "responses": [
        {
          "uuid": "a50cdb93-9649-4afd-b6ec-51d8760c6237",
          "body": "{\n  \"serviceArns\": [\n    \"arn:aws:ecs:us-east-1:012345678910:service/my-http-service\"\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "2ab6f806-d700-4967-bcd9-918f6a70bcb5",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "8cabdf95-aa7b-4804-983a-548a4d65b204",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "663e39f8-a765-44f2-9737-a26b169f4cf8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "9932120b-45ab-4639-832e-d5eb88a42884",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "53d71900-4fbc-4977-874f-26fff2872a3b",
      "documentation": "List the tags for an Amazon ECS resource.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListTagsForResource",
      "responses": [
        {
          "uuid": "567a71b4-322b-4b15-8ec5-0e55514671da",
          "body": "{\n  \"tags\": [\n    {\n      \"key\": \"team\",\n      \"value\": \"dev\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "b2826923-d580-4470-ad89-b22c47f6a2d8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "e895e7ec-b9f6-4498-a335-31908f9edbcc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "68d17876-ef89-435f-9717-f2690bfd217d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "4baca164-6567-44a1-9cef-b7bd0d27b4c9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "5800234e-56fc-4f80-845f-461d25840ac3",
      "documentation": "<p>Returns a list of task definition families that are registered to your account (which may include task definition families that no longer have any <code>ACTIVE</code> task definition revisions).</p> <p>You can filter out task definition families that do not contain any <code>ACTIVE</code> task definition revisions by setting the <code>status</code> parameter to <code>ACTIVE</code>. You can also filter the results with the <code>familyPrefix</code> parameter.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListTaskDefinitionFamilies",
      "responses": [
        {
          "uuid": "603869c8-ac0f-46e3-9e14-2aba488f64db",
          "body": "{\n  \"families\": [\n    \"hpcc\",\n    \"hpcc-c4-8xlarge\"\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "471c5f1e-b9ea-472f-ade9-f8fce51c6f1f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "e3013fc4-4d4d-4808-afe1-136dc9d45445",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "be03b8b4-83f6-45cc-8912-f8170a6832c6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "0b0d65ba-8072-486d-850b-259df2c8a2e6",
      "documentation": "Returns a list of task definitions that are registered to your account. You can filter the results by family name with the <code>familyPrefix</code> parameter or by status with the <code>status</code> parameter.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListTaskDefinitions",
      "responses": [
        {
          "uuid": "aadb9044-d257-42d4-8976-4d9f8641f232",
          "body": "{\n  \"taskDefinitionArns\": [\n    \"arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:3\",\n    \"arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:4\",\n    \"arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:5\",\n    \"arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/wordpress:6\"\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "de094768-6508-482a-9a07-0fc2381bd5d8",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "7dab8e33-fa46-4d43-8c15-c28accd0b387",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "972cacda-c285-4bb2-a347-cd1badfc25ca",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "d8396e0d-4f9b-4b51-b63f-302f98508845",
      "documentation": "<p>Returns a list of tasks. You can filter the results by cluster, task definition family, container instance, launch type, what IAM principal started the task, or by the desired status of the task.</p> <p>Recently stopped tasks might appear in the returned results. Currently, stopped tasks appear in the returned results for at least one hour.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.ListTasks",
      "responses": [
        {
          "uuid": "2af90deb-1585-47d7-86ce-87800c977b63",
          "body": "{\n  \"taskArns\": [\n    \"arn:aws:ecs:us-east-1:012345678910:task/0cc43cdb-3bee-4407-9c26-c0e6ea5bee84\"\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "03812b46-3240-4e69-b774-f1427dc55dc2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "9e65dbc7-f094-490d-9844-59c448190f58",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "53270ccc-f6a3-4c84-a1c6-95f37e131d26",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "52be9d6b-ef3d-4d9c-9c0d-b6f304e9b7b7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "74c06a35-443b-4d1e-a724-b5812753b77c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ServiceNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "db540027-4c29-4a33-a01c-a3e63f222a97",
      "documentation": "<p>Modifies an account setting. Account settings are set on a per-Region basis.</p> <p>If you change the account setting for the root user, the default settings for all of the IAM users and roles for which no individual account setting has been specified are reset. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html\">Account Settings</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> <p>When <code>serviceLongArnFormat</code>, <code>taskLongArnFormat</code>, or <code>containerInstanceLongArnFormat</code> are specified, the Amazon Resource Name (ARN) and resource ID format of the resource type for a specified IAM user, IAM role, or the root user for an account is affected. The opt-in and opt-out account setting must be set for each Amazon ECS resource separately. The ARN and resource ID format of a resource will be defined by the opt-in status of the IAM user or role that created the resource. You must enable this setting to use Amazon ECS features such as resource tagging.</p> <p>When <code>awsvpcTrunking</code> is specified, the elastic network interface (ENI) limit for any new container instances that support the feature is changed. If <code>awsvpcTrunking</code> is enabled, any new container instances that support the feature are launched have the increased ENI limits available to them. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-eni.html\">Elastic Network Interface Trunking</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> <p>When <code>containerInsights</code> is specified, the default setting indicating whether CloudWatch Container Insights is enabled for your clusters is changed. If <code>containerInsights</code> is enabled, any new clusters that are created will have Container Insights enabled unless you disable it during cluster creation. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cloudwatch-container-insights.html\">CloudWatch Container Insights</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.PutAccountSetting",
      "responses": [
        {
          "uuid": "7d38c505-4390-4ac2-a446-e382f275f629",
          "body": "{\n  \"setting\": {\n    \"name\": \"containerInstanceLongArnFormat\",\n    \"value\": \"enabled\",\n    \"principalArn\": \"arn:aws:iam::<aws_account_id>:user/principalName\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "f78b8e24-3aa9-4b5c-8ea7-1af259900c8f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "54593f78-9fdf-4903-984f-5e4d6bc8c600",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "54449ec6-8883-4e07-804c-76039526b41f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "c6ed3228-ea99-4343-a26b-edcc40dafb47",
      "documentation": "Modifies an account setting for all IAM users on an account for whom no individual account setting has been specified. Account settings are set on a per-Region basis.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.PutAccountSettingDefault",
      "responses": [
        {
          "uuid": "c13b31cc-64ce-4f85-a0a8-034c8df8c4a6",
          "body": "{\n  \"setting\": {\n    \"name\": \"serviceLongArnFormat\",\n    \"value\": \"enabled\",\n    \"principalArn\": \"arn:aws:iam::<aws_account_id>:root\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "ac5f055c-1f05-4612-a785-632b10da294a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "daf197ca-aaa4-4d32-87e8-ffecf87e001c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "b0525066-01a6-4254-b845-41e6d26c9dbe",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "5ba6bc32-62b1-4b1b-8669-ac378a71f5a9",
      "documentation": "Create or update an attribute on an Amazon ECS resource. If the attribute does not exist, it is created. If the attribute exists, its value is replaced with the specified value. To delete an attribute, use <a>DeleteAttributes</a>. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes\">Attributes</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.PutAttributes",
      "responses": [
        {
          "uuid": "f616bd06-3412-48af-bde0-74b847fae2ab",
          "body": "{\n  \"attributes\": [\n    {\n      \"name\": \"\",\n      \"value\": \"\",\n      \"targetType\": \"\",\n      \"targetId\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "80cbf309-6f61-40e8-a586-320a8994f8fa",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "7667c1c6-ec69-4a91-adda-4c89a1473331",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "TargetNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "8dec695f-95f0-4ba4-a076-d6ac855b1f39",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "AttributeLimitExceededException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "548ac0aa-617b-41d9-98f8-98a851aac13a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "a9b2bddd-22e6-4dff-946c-e51aa06135cd",
      "documentation": "<p>Modifies the available capacity providers and the default capacity provider strategy for a cluster.</p> <p>You must specify both the available capacity providers and a default capacity provider strategy for the cluster. If the specified cluster has existing capacity providers associated with it, you must specify all existing capacity providers in addition to any new ones you want to add. Any existing capacity providers associated with a cluster that are omitted from a <a>PutClusterCapacityProviders</a> API call will be disassociated with the cluster. You can only disassociate an existing capacity provider from a cluster if it's not being used by any existing tasks.</p> <p>When creating a service or running a task on a cluster, if no capacity provider or launch type is specified, then the cluster's default capacity provider strategy is used. It is recommended to define a default capacity provider strategy for your cluster, however you may specify an empty array (<code>[]</code>) to bypass defining a default strategy.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.PutClusterCapacityProviders",
      "responses": [
        {
          "uuid": "5f40a732-1ed9-4134-bb15-2bd4863e29d5",
          "body": "{\n  \"cluster\": {\n    \"clusterArn\": \"\",\n    \"clusterName\": \"\",\n    \"configuration\": {\n      \"executeCommandConfiguration\": {\n        \"kmsKeyId\": \"\",\n        \"logging\": \"\",\n        \"logConfiguration\": {\n          \"cloudWatchLogGroupName\": \"\",\n          \"cloudWatchEncryptionEnabled\": {{faker 'datatype.boolean'}},\n          \"s3BucketName\": \"\",\n          \"s3EncryptionEnabled\": {{faker 'datatype.boolean'}},\n          \"s3KeyPrefix\": \"\"\n        }\n      }\n    },\n    \"status\": \"\",\n    \"registeredContainerInstancesCount\": {{faker 'datatype.number'}},\n    \"runningTasksCount\": {{faker 'datatype.number'}},\n    \"pendingTasksCount\": {{faker 'datatype.number'}},\n    \"activeServicesCount\": {{faker 'datatype.number'}},\n    \"statistics\": [\n      {\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"tags\": [\n      {\n        \"key\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"settings\": [\n      {\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"capacityProviders\": [\n      \"\"\n    ],\n    \"defaultCapacityProviderStrategy\": [\n      {\n        \"capacityProvider\": \"\",\n        \"weight\": {{faker 'datatype.number'}},\n        \"base\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"attachments\": [\n      {\n        \"id\": \"\",\n        \"type\": \"\",\n        \"status\": \"\",\n        \"details\": [\n          {\n            \"name\": \"\",\n            \"value\": \"\"\n          }\n        ]\n      }\n    ],\n    \"attachmentsStatus\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "b5ff5a8f-7847-447c-8871-2834bd6a3100",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "ebe78b7f-1278-42de-81cf-3d7e6618efde",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "9ba26d52-e436-4b4d-85fc-167112b6ac5a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "3d688b40-deae-4604-84ee-d94d47d8fce9",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f0fd0116-7a68-4085-b787-2dde659b1718",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ResourceInUseException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "2de98fe7-102b-47b2-b41b-1ea5e5c44172",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "UpdateInProgressException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "ce9bbcc2-ff99-4ae9-b1de-02c62a7f556c",
      "documentation": "<note> <p>This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.</p> </note> <p>Registers an EC2 instance into the specified cluster. This instance becomes available to place containers on.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.RegisterContainerInstance",
      "responses": [
        {
          "uuid": "b5d88589-57cc-4c63-91bb-5996b2db5df6",
          "body": "{\n  \"containerInstance\": {\n    \"containerInstanceArn\": \"\",\n    \"ec2InstanceId\": \"\",\n    \"capacityProviderName\": \"\",\n    \"version\": {{faker 'datatype.number'}},\n    \"versionInfo\": {\n      \"agentVersion\": \"\",\n      \"agentHash\": \"\",\n      \"dockerVersion\": \"\"\n    },\n    \"remainingResources\": [\n      {\n        \"name\": \"\",\n        \"type\": \"\",\n        \"doubleValue\": {{faker 'datatype.float'}},\n        \"longValue\": {{faker 'datatype.number'}},\n        \"integerValue\": {{faker 'datatype.number'}},\n        \"stringSetValue\": [\n          \"\"\n        ]\n      }\n    ],\n    \"registeredResources\": [\n      {\n        \"name\": \"\",\n        \"type\": \"\",\n        \"doubleValue\": {{faker 'datatype.float'}},\n        \"longValue\": {{faker 'datatype.number'}},\n        \"integerValue\": {{faker 'datatype.number'}},\n        \"stringSetValue\": [\n          \"\"\n        ]\n      }\n    ],\n    \"status\": \"\",\n    \"statusReason\": \"\",\n    \"agentConnected\": {{faker 'datatype.boolean'}},\n    \"runningTasksCount\": {{faker 'datatype.number'}},\n    \"pendingTasksCount\": {{faker 'datatype.number'}},\n    \"agentUpdateStatus\": \"\",\n    \"attributes\": [\n      {\n        \"name\": \"\",\n        \"value\": \"\",\n        \"targetType\": \"\",\n        \"targetId\": \"\"\n      }\n    ],\n    \"registeredAt\": \"{{faker 'date.recent' 365}}\",\n    \"attachments\": [\n      {\n        \"id\": \"\",\n        \"type\": \"\",\n        \"status\": \"\",\n        \"details\": [\n          {\n            \"name\": \"\",\n            \"value\": \"\"\n          }\n        ]\n      }\n    ],\n    \"tags\": [\n      {\n        \"key\": \"\",\n        \"value\": \"\"\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "444e093c-d8e3-4244-9ad0-d6e7da6909fe",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "3e177f81-f633-49d7-8745-4b0e3bf71d80",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "48bbd17e-369e-4da6-9173-3bb822eec1bd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "6de74625-6e8c-450a-810a-5cc1855ccca0",
      "documentation": "<p>Registers a new task definition from the supplied <code>family</code> and <code>containerDefinitions</code>. Optionally, you can add data volumes to your containers with the <code>volumes</code> parameter. For more information about task definition parameters and defaults, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html\">Amazon ECS Task Definitions</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> <p>You can specify an IAM role for your task with the <code>taskRoleArn</code> parameter. When you specify an IAM role for a task, its containers can then use the latest versions of the CLI or SDKs to make API requests to the Amazon Web Services services that are specified in the IAM policy associated with the role. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html\">IAM Roles for Tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> <p>You can specify a Docker networking mode for the containers in your task definition with the <code>networkMode</code> parameter. The available network modes correspond to those described in <a href=\"https://docs.docker.com/engine/reference/run/#/network-settings\">Network settings</a> in the Docker run reference. If you specify the <code>awsvpc</code> network mode, the task is allocated an elastic network interface, and you must specify a <a>NetworkConfiguration</a> when you create a service or run a task with the task definition. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html\">Task Networking</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.RegisterTaskDefinition",
      "responses": [
        {
          "uuid": "8bb49be6-931c-4b6a-80f2-1acf1ac9eb1b",
          "body": "{\n  \"taskDefinition\": {\n    \"containerDefinitions\": [\n      {\n        \"name\": \"sleep\",\n        \"command\": [\n          \"sleep\",\n          \"360\"\n        ],\n        \"cpu\": 10,\n        \"environment\": [],\n        \"essential\": true,\n        \"image\": \"busybox\",\n        \"memory\": 10,\n        \"mountPoints\": [],\n        \"portMappings\": [],\n        \"volumesFrom\": []\n      }\n    ],\n    \"family\": \"sleep360\",\n    \"revision\": 1,\n    \"taskDefinitionArn\": \"arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/sleep360:19\",\n    \"volumes\": []\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "9655959a-232d-4428-991b-e3f05fb7dc0f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "d758a206-1fb3-4e7c-b5a5-177df8eeca04",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "333d750a-37d9-41ca-913b-cefe5b5ee7a7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "9c6a85d5-3c6a-4545-9901-9081d46c52c0",
      "documentation": "<p>Starts a new task using the specified task definition.</p> <p>You can allow Amazon ECS to place tasks for you, or you can customize how Amazon ECS places tasks using placement constraints and placement strategies. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html\">Scheduling Tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> <p>Alternatively, you can use <a>StartTask</a> to use your own scheduler or place tasks manually on specific container instances.</p> <p>The Amazon ECS API follows an eventual consistency model, due to the distributed nature of the system supporting the API. This means that the result of an API command you run that affects your Amazon ECS resources might not be immediately visible to all subsequent commands you run. Keep this in mind when you carry out an API command that immediately follows a previous API command.</p> <p>To manage eventual consistency, you can do the following:</p> <ul> <li> <p>Confirm the state of the resource before you run a command to modify it. Run the DescribeTasks command using an exponential backoff algorithm to ensure that you allow enough time for the previous command to propagate through the system. To do this, run the DescribeTasks command repeatedly, starting with a couple of seconds of wait time and increasing gradually up to five minutes of wait time.</p> </li> <li> <p>Add wait time between subsequent commands, even if the DescribeTasks command returns an accurate response. Apply an exponential backoff algorithm starting with a couple of seconds of wait time, and increase gradually up to about five minutes of wait time.</p> </li> </ul>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.RunTask",
      "responses": [
        {
          "uuid": "c33a2e64-aa12-4bc8-abf2-9fb102f8539d",
          "body": "{\n  \"tasks\": [\n    {\n      \"containerInstanceArn\": \"arn:aws:ecs:us-east-1:<aws_account_id>:container-instance/ffe3d344-77e2-476c-a4d0-bf560ad50acb\",\n      \"containers\": [\n        {\n          \"name\": \"sleep\",\n          \"containerArn\": \"arn:aws:ecs:us-east-1:<aws_account_id>:container/58591c8e-be29-4ddf-95aa-ee459d4c59fd\",\n          \"lastStatus\": \"PENDING\",\n          \"taskArn\": \"arn:aws:ecs:us-east-1:<aws_account_id>:task/a9f21ea7-c9f5-44b1-b8e6-b31f50ed33c0\"\n        }\n      ],\n      \"desiredStatus\": \"RUNNING\",\n      \"lastStatus\": \"PENDING\",\n      \"overrides\": {\n        \"containerOverrides\": [\n          {\n            \"name\": \"sleep\"\n          }\n        ]\n      },\n      \"taskArn\": \"arn:aws:ecs:us-east-1:<aws_account_id>:task/a9f21ea7-c9f5-44b1-b8e6-b31f50ed33c0\",\n      \"taskDefinitionArn\": \"arn:aws:ecs:us-east-1:<aws_account_id>:task-definition/sleep360:1\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "e5eb3353-6ff0-4a01-9d64-8c274b0efffe",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f173a28f-b654-4c7b-afe8-32e669862937",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "68dad6ab-3409-4f5c-830d-5cb336dba09a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "9fef0b3f-b8e8-446d-b0ba-279f133ae66f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "afa4988c-7c64-4be6-ae63-c7571aba711d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UnsupportedFeatureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "eeb07992-e1ff-4e9b-9b9d-e9afdb443fad",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "PlatformUnknownException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "3bce1d89-9be8-4b5b-9c07-7e3568e65153",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "PlatformTaskDefinitionIncompatibilityException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "9501caa6-a8fb-485b-9edf-bb29cabbd00f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "AccessDeniedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "9818fc7e-d1ca-41b1-916c-fff923ad80b7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 488,
          "label": "BlockedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "19f2e4f2-e38d-47f0-8949-2c1fc8f17fab",
      "documentation": "<p>Starts a new task from the specified task definition on the specified container instance or instances.</p> <p>Alternatively, you can use <a>RunTask</a> to place tasks for you. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/scheduling_tasks.html\">Scheduling Tasks</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.StartTask",
      "responses": [
        {
          "uuid": "31b17cb0-2190-476c-91e5-43c5f355ee15",
          "body": "{\n  \"tasks\": [\n    {\n      \"attachments\": [\n        {\n          \"id\": \"\",\n          \"type\": \"\",\n          \"status\": \"\",\n          \"details\": [\n            {\n              \"name\": \"\",\n              \"value\": \"\"\n            }\n          ]\n        }\n      ],\n      \"attributes\": [\n        {\n          \"name\": \"\",\n          \"value\": \"\",\n          \"targetType\": \"\",\n          \"targetId\": \"\"\n        }\n      ],\n      \"availabilityZone\": \"\",\n      \"capacityProviderName\": \"\",\n      \"clusterArn\": \"\",\n      \"connectivity\": \"\",\n      \"connectivityAt\": \"{{faker 'date.recent' 365}}\",\n      \"containerInstanceArn\": \"\",\n      \"containers\": [\n        {\n          \"containerArn\": \"\",\n          \"taskArn\": \"\",\n          \"name\": \"\",\n          \"image\": \"\",\n          \"imageDigest\": \"\",\n          \"runtimeId\": \"\",\n          \"lastStatus\": \"\",\n          \"exitCode\": {{faker 'datatype.number'}},\n          \"reason\": \"\",\n          \"networkBindings\": [\n            {\n              \"bindIP\": \"\",\n              \"containerPort\": {{faker 'datatype.number'}},\n              \"hostPort\": {{faker 'datatype.number'}},\n              \"protocol\": \"\"\n            }\n          ],\n          \"networkInterfaces\": [\n            {\n              \"attachmentId\": \"\",\n              \"privateIpv4Address\": \"\",\n              \"ipv6Address\": \"\"\n            }\n          ],\n          \"healthStatus\": \"\",\n          \"managedAgents\": [\n            {\n              \"lastStartedAt\": \"{{faker 'date.recent' 365}}\",\n              \"name\": \"\",\n              \"reason\": \"\",\n              \"lastStatus\": \"\"\n            }\n          ],\n          \"cpu\": \"\",\n          \"memory\": \"\",\n          \"memoryReservation\": \"\",\n          \"gpuIds\": [\n            \"\"\n          ]\n        }\n      ],\n      \"cpu\": \"\",\n      \"createdAt\": \"{{faker 'date.recent' 365}}\",\n      \"desiredStatus\": \"\",\n      \"enableExecuteCommand\": {{faker 'datatype.boolean'}},\n      \"executionStoppedAt\": \"{{faker 'date.recent' 365}}\",\n      \"group\": \"\",\n      \"healthStatus\": \"\",\n      \"inferenceAccelerators\": [\n        {\n          \"deviceName\": \"\",\n          \"deviceType\": \"\"\n        }\n      ],\n      \"lastStatus\": \"\",\n      \"launchType\": \"\",\n      \"memory\": \"\",\n      \"overrides\": {\n        \"containerOverrides\": [\n          {\n            \"name\": \"\",\n            \"command\": [\n              \"\"\n            ],\n            \"environment\": [\n              {\n                \"name\": \"\",\n                \"value\": \"\"\n              }\n            ],\n            \"environmentFiles\": [\n              {\n                \"value\": \"\",\n                \"type\": \"\"\n              }\n            ],\n            \"cpu\": {{faker 'datatype.number'}},\n            \"memory\": {{faker 'datatype.number'}},\n            \"memoryReservation\": {{faker 'datatype.number'}},\n            \"resourceRequirements\": [\n              {\n                \"value\": \"\",\n                \"type\": \"\"\n              }\n            ]\n          }\n        ],\n        \"cpu\": \"\",\n        \"inferenceAcceleratorOverrides\": [\n          {\n            \"deviceName\": \"\",\n            \"deviceType\": \"\"\n          }\n        ],\n        \"executionRoleArn\": \"\",\n        \"memory\": \"\",\n        \"taskRoleArn\": \"\",\n        \"ephemeralStorage\": {\n          \"sizeInGiB\": {{faker 'datatype.number'}}\n        }\n      },\n      \"platformVersion\": \"\",\n      \"pullStartedAt\": \"{{faker 'date.recent' 365}}\",\n      \"pullStoppedAt\": \"{{faker 'date.recent' 365}}\",\n      \"startedAt\": \"{{faker 'date.recent' 365}}\",\n      \"startedBy\": \"\",\n      \"stopCode\": \"\",\n      \"stoppedAt\": \"{{faker 'date.recent' 365}}\",\n      \"stoppedReason\": \"\",\n      \"stoppingAt\": \"{{faker 'date.recent' 365}}\",\n      \"tags\": [\n        {\n          \"key\": \"\",\n          \"value\": \"\"\n        }\n      ],\n      \"taskArn\": \"\",\n      \"taskDefinitionArn\": \"\",\n      \"version\": {{faker 'datatype.number'}},\n      \"ephemeralStorage\": {\n        \"sizeInGiB\": {{faker 'datatype.number'}}\n      }\n    }\n  ],\n  \"failures\": [\n    {\n      \"arn\": \"\",\n      \"reason\": \"\",\n      \"detail\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "c1f473b9-4df9-4177-98e8-2c26c8addadd",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "c8bed496-ca4f-49eb-b3aa-120d21424787",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "783ed022-c004-4fe3-a172-9c2fedf00584",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "0ad5b0b0-b4ab-4157-b808-a1f05831acc4",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "b8d98fbb-d83b-41b7-875e-6580462ca611",
      "documentation": "<p>Stops a running task. Any tags associated with the task will be deleted.</p> <p>When <a>StopTask</a> is called on a task, the equivalent of <code>docker stop</code> is issued to the containers running in the task. This results in a <code>SIGTERM</code> value and a default 30-second timeout, after which the <code>SIGKILL</code> value is sent and the containers are forcibly stopped. If the container handles the <code>SIGTERM</code> value gracefully and exits within 30 seconds from receiving it, no <code>SIGKILL</code> value is sent.</p> <note> <p>The default 30-second timeout can be configured on the Amazon ECS container agent with the <code>ECS_CONTAINER_STOP_TIMEOUT</code> variable. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.html\">Amazon ECS Container Agent Configuration</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> </note>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.StopTask",
      "responses": [
        {
          "uuid": "796b348e-3104-404a-a19e-7298d6371270",
          "body": "{\n  \"task\": {\n    \"attachments\": [\n      {\n        \"id\": \"\",\n        \"type\": \"\",\n        \"status\": \"\",\n        \"details\": [\n          {\n            \"name\": \"\",\n            \"value\": \"\"\n          }\n        ]\n      }\n    ],\n    \"attributes\": [\n      {\n        \"name\": \"\",\n        \"value\": \"\",\n        \"targetType\": \"\",\n        \"targetId\": \"\"\n      }\n    ],\n    \"availabilityZone\": \"\",\n    \"capacityProviderName\": \"\",\n    \"clusterArn\": \"\",\n    \"connectivity\": \"\",\n    \"connectivityAt\": \"{{faker 'date.recent' 365}}\",\n    \"containerInstanceArn\": \"\",\n    \"containers\": [\n      {\n        \"containerArn\": \"\",\n        \"taskArn\": \"\",\n        \"name\": \"\",\n        \"image\": \"\",\n        \"imageDigest\": \"\",\n        \"runtimeId\": \"\",\n        \"lastStatus\": \"\",\n        \"exitCode\": {{faker 'datatype.number'}},\n        \"reason\": \"\",\n        \"networkBindings\": [\n          {\n            \"bindIP\": \"\",\n            \"containerPort\": {{faker 'datatype.number'}},\n            \"hostPort\": {{faker 'datatype.number'}},\n            \"protocol\": \"\"\n          }\n        ],\n        \"networkInterfaces\": [\n          {\n            \"attachmentId\": \"\",\n            \"privateIpv4Address\": \"\",\n            \"ipv6Address\": \"\"\n          }\n        ],\n        \"healthStatus\": \"\",\n        \"managedAgents\": [\n          {\n            \"lastStartedAt\": \"{{faker 'date.recent' 365}}\",\n            \"name\": \"\",\n            \"reason\": \"\",\n            \"lastStatus\": \"\"\n          }\n        ],\n        \"cpu\": \"\",\n        \"memory\": \"\",\n        \"memoryReservation\": \"\",\n        \"gpuIds\": [\n          \"\"\n        ]\n      }\n    ],\n    \"cpu\": \"\",\n    \"createdAt\": \"{{faker 'date.recent' 365}}\",\n    \"desiredStatus\": \"\",\n    \"enableExecuteCommand\": {{faker 'datatype.boolean'}},\n    \"executionStoppedAt\": \"{{faker 'date.recent' 365}}\",\n    \"group\": \"\",\n    \"healthStatus\": \"\",\n    \"inferenceAccelerators\": [\n      {\n        \"deviceName\": \"\",\n        \"deviceType\": \"\"\n      }\n    ],\n    \"lastStatus\": \"\",\n    \"launchType\": \"\",\n    \"memory\": \"\",\n    \"overrides\": {\n      \"containerOverrides\": [\n        {\n          \"name\": \"\",\n          \"command\": [\n            \"\"\n          ],\n          \"environment\": [\n            {\n              \"name\": \"\",\n              \"value\": \"\"\n            }\n          ],\n          \"environmentFiles\": [\n            {\n              \"value\": \"\",\n              \"type\": \"\"\n            }\n          ],\n          \"cpu\": {{faker 'datatype.number'}},\n          \"memory\": {{faker 'datatype.number'}},\n          \"memoryReservation\": {{faker 'datatype.number'}},\n          \"resourceRequirements\": [\n            {\n              \"value\": \"\",\n              \"type\": \"\"\n            }\n          ]\n        }\n      ],\n      \"cpu\": \"\",\n      \"inferenceAcceleratorOverrides\": [\n        {\n          \"deviceName\": \"\",\n          \"deviceType\": \"\"\n        }\n      ],\n      \"executionRoleArn\": \"\",\n      \"memory\": \"\",\n      \"taskRoleArn\": \"\",\n      \"ephemeralStorage\": {\n        \"sizeInGiB\": {{faker 'datatype.number'}}\n      }\n    },\n    \"platformVersion\": \"\",\n    \"pullStartedAt\": \"{{faker 'date.recent' 365}}\",\n    \"pullStoppedAt\": \"{{faker 'date.recent' 365}}\",\n    \"startedAt\": \"{{faker 'date.recent' 365}}\",\n    \"startedBy\": \"\",\n    \"stopCode\": \"\",\n    \"stoppedAt\": \"{{faker 'date.recent' 365}}\",\n    \"stoppedReason\": \"\",\n    \"stoppingAt\": \"{{faker 'date.recent' 365}}\",\n    \"tags\": [\n      {\n        \"key\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"taskArn\": \"\",\n    \"taskDefinitionArn\": \"\",\n    \"version\": {{faker 'datatype.number'}},\n    \"ephemeralStorage\": {\n      \"sizeInGiB\": {{faker 'datatype.number'}}\n    }\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "f8672374-c792-4e45-bedf-7436242ab632",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "6be8edcf-d570-44de-8ded-04817c9131c2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f296d8f1-0269-4d1c-a18d-efec69e94048",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "479d1f39-0598-4a3f-98e6-b752f9d0a74e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "b99da4d5-2db5-47cd-b075-ece8f16c861f",
      "documentation": "<note> <p>This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.</p> </note> <p>Sent to acknowledge that an attachment changed states.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.SubmitAttachmentStateChanges",
      "responses": [
        {
          "uuid": "b7f7ce0f-1461-4900-9abd-ba02ca38bd92",
          "body": "{\n  \"acknowledgment\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "3593f6dc-940a-4525-9000-3338082b9454",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "8a7dec1e-378d-4df5-bd60-df53b8986c58",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f95caa2d-1485-4881-bcbc-412c2923cb35",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "AccessDeniedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "171cfbed-de1a-4ca7-85be-c8d87ad16b8f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "e8d91e2a-9017-4f4f-b423-0adbdb0e4237",
      "documentation": "<note> <p>This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.</p> </note> <p>Sent to acknowledge that a container changed states.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.SubmitContainerStateChange",
      "responses": [
        {
          "uuid": "974f09c9-9563-4ab0-a49c-a6a2287d1454",
          "body": "{\n  \"acknowledgment\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "9ffe5d4f-bff3-425c-88e4-d35e80e6e90c",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "04fd054d-7a75-4add-803c-c363d5eea379",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "faf0efc5-7d59-4547-929d-8252b8a96501",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "AccessDeniedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "1c14a77c-9b2b-4822-b7b3-555069016475",
      "documentation": "<note> <p>This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.</p> </note> <p>Sent to acknowledge that a task changed states.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.SubmitTaskStateChange",
      "responses": [
        {
          "uuid": "9e0067a5-6911-406d-9333-e8d1e248d157",
          "body": "{\n  \"acknowledgment\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "109b5ff9-09c9-4fe7-9506-065b7ed68a0b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "961667d1-aaa1-4dd2-93da-d685268cd737",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "b666184e-2248-4741-9cf4-052908f0c848",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "AccessDeniedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "18dfcfc2-c1b5-4175-bfd9-ce694393148d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "5138b472-4fba-40ec-b9b4-91b3833ca41c",
      "documentation": "Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are deleted as well.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.TagResource",
      "responses": [
        {
          "uuid": "bc90e803-ff25-4d0c-be77-1d364381b9a8",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "2184b125-ac96-4421-9bc8-e1a3b44b5ddc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "b62e6b44-910c-48dd-8111-b3c0d1626062",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "5d303c80-55e5-4f71-9bc6-ac39b7ba3e3d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "4a94206f-ffff-4896-b2ef-10252b90479f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ResourceNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "56639c96-4699-4841-9db3-0b5770723e0e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "b680ff01-dc92-4e1a-9215-c88a226bb218",
      "documentation": "Deletes specified tags from a resource.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UntagResource",
      "responses": [
        {
          "uuid": "6c20f842-4b6e-42b9-8c7b-ae34f2404a11",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "127315f7-6221-44a7-ae13-cd28658223fa",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "12f4922a-4720-49df-8caf-5c537ef01f6d",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "bc627c46-b48a-42fd-aaeb-0310158c4984",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "a884ccb8-ec08-427f-a4e3-474d8271841f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ResourceNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "1c74f9c2-633e-44dc-8daa-7bb26aa749c6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "9917b6ec-0641-4a80-add5-3cf81adf3bd2",
      "documentation": "Modifies the parameters for a capacity provider.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateCapacityProvider",
      "responses": [
        {
          "uuid": "9e5d5abe-88b7-4fcd-8b58-12f168fc7665",
          "body": "{\n  \"capacityProvider\": {\n    \"capacityProviderArn\": \"\",\n    \"name\": \"\",\n    \"status\": \"\",\n    \"autoScalingGroupProvider\": {\n      \"autoScalingGroupArn\": \"\",\n      \"managedScaling\": {\n        \"status\": \"\",\n        \"targetCapacity\": {{faker 'datatype.number'}},\n        \"minimumScalingStepSize\": {{faker 'datatype.number'}},\n        \"maximumScalingStepSize\": {{faker 'datatype.number'}},\n        \"instanceWarmupPeriod\": {{faker 'datatype.number'}}\n      },\n      \"managedTerminationProtection\": \"\"\n    },\n    \"updateStatus\": \"\",\n    \"updateStatusReason\": \"\",\n    \"tags\": [\n      {\n        \"key\": \"\",\n        \"value\": \"\"\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "c9265f79-ee13-412b-9805-e009f8d3bf96",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "e816260a-0136-4da6-bddc-d9d76b5f9653",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "7977062c-1aa8-42e1-9fae-6c04d91771ed",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "f78a3cd5-d85b-48d7-a0d9-5c00c781c088",
      "documentation": "Updates the cluster.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateCluster",
      "responses": [
        {
          "uuid": "ff9ec136-253a-4cfe-bb08-23e2be017085",
          "body": "{\n  \"cluster\": {\n    \"clusterArn\": \"\",\n    \"clusterName\": \"\",\n    \"configuration\": {\n      \"executeCommandConfiguration\": {\n        \"kmsKeyId\": \"\",\n        \"logging\": \"\",\n        \"logConfiguration\": {\n          \"cloudWatchLogGroupName\": \"\",\n          \"cloudWatchEncryptionEnabled\": {{faker 'datatype.boolean'}},\n          \"s3BucketName\": \"\",\n          \"s3EncryptionEnabled\": {{faker 'datatype.boolean'}},\n          \"s3KeyPrefix\": \"\"\n        }\n      }\n    },\n    \"status\": \"\",\n    \"registeredContainerInstancesCount\": {{faker 'datatype.number'}},\n    \"runningTasksCount\": {{faker 'datatype.number'}},\n    \"pendingTasksCount\": {{faker 'datatype.number'}},\n    \"activeServicesCount\": {{faker 'datatype.number'}},\n    \"statistics\": [\n      {\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"tags\": [\n      {\n        \"key\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"settings\": [\n      {\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"capacityProviders\": [\n      \"\"\n    ],\n    \"defaultCapacityProviderStrategy\": [\n      {\n        \"capacityProvider\": \"\",\n        \"weight\": {{faker 'datatype.number'}},\n        \"base\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"attachments\": [\n      {\n        \"id\": \"\",\n        \"type\": \"\",\n        \"status\": \"\",\n        \"details\": [\n          {\n            \"name\": \"\",\n            \"value\": \"\"\n          }\n        ]\n      }\n    ],\n    \"attachmentsStatus\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "826e9ed2-7cae-42fd-aaf0-47e45f3661fc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "93d6a7cf-9c2c-4555-86b8-944f3f7b77fb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f382a52d-4e70-40d3-94d3-1c3e4120049a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "7f89a151-7979-4215-8bb3-7e4d8c0b6b62",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "bfa2ed36-b6f8-4d18-9f34-0313d56aa2af",
      "documentation": "Modifies the settings to use for a cluster.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateClusterSettings",
      "responses": [
        {
          "uuid": "c075ca45-4666-4eec-9b6f-d0b75125ec7a",
          "body": "{\n  \"cluster\": {\n    \"clusterArn\": \"\",\n    \"clusterName\": \"\",\n    \"configuration\": {\n      \"executeCommandConfiguration\": {\n        \"kmsKeyId\": \"\",\n        \"logging\": \"\",\n        \"logConfiguration\": {\n          \"cloudWatchLogGroupName\": \"\",\n          \"cloudWatchEncryptionEnabled\": {{faker 'datatype.boolean'}},\n          \"s3BucketName\": \"\",\n          \"s3EncryptionEnabled\": {{faker 'datatype.boolean'}},\n          \"s3KeyPrefix\": \"\"\n        }\n      }\n    },\n    \"status\": \"\",\n    \"registeredContainerInstancesCount\": {{faker 'datatype.number'}},\n    \"runningTasksCount\": {{faker 'datatype.number'}},\n    \"pendingTasksCount\": {{faker 'datatype.number'}},\n    \"activeServicesCount\": {{faker 'datatype.number'}},\n    \"statistics\": [\n      {\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"tags\": [\n      {\n        \"key\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"settings\": [\n      {\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"capacityProviders\": [\n      \"\"\n    ],\n    \"defaultCapacityProviderStrategy\": [\n      {\n        \"capacityProvider\": \"\",\n        \"weight\": {{faker 'datatype.number'}},\n        \"base\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"attachments\": [\n      {\n        \"id\": \"\",\n        \"type\": \"\",\n        \"status\": \"\",\n        \"details\": [\n          {\n            \"name\": \"\",\n            \"value\": \"\"\n          }\n        ]\n      }\n    ],\n    \"attachmentsStatus\": \"\"\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "51498625-2be1-4b3d-95e4-990cf73858cb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "9682b807-9115-4f32-b857-361a56940913",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "764b8d51-44d4-4db2-84fc-69b3a88d20ab",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "069eba19-8b26-4d22-bfc8-4b7f2dd7b757",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "81e5cb7b-aede-4a90-b7b1-1c5ef8a20716",
      "documentation": "<p>Updates the Amazon ECS container agent on a specified container instance. Updating the Amazon ECS container agent does not interrupt running tasks or services on the container instance. The process for updating the agent differs depending on whether your container instance was launched with the Amazon ECS-optimized AMI or another operating system.</p> <note> <p>The <code>UpdateContainerAgent</code> API isn't supported for container instances using the Amazon ECS-optimized Amazon Linux 2 (arm64) AMI. To update the container agent, you can update the <code>ecs-init</code> package which will update the agent. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/agent-update-ecs-ami.html\">Updating the Amazon ECS container agent</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p> </note> <p>The <code>UpdateContainerAgent</code> API requires an Amazon ECS-optimized AMI or Amazon Linux AMI with the <code>ecs-init</code> service installed and running. For help updating the Amazon ECS container agent on other operating systems, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-update.html#manually_update_agent\">Manually updating the Amazon ECS container agent</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateContainerAgent",
      "responses": [
        {
          "uuid": "6fbfc0ff-0e44-4697-9a64-382074757852",
          "body": "{\n  \"containerInstance\": {\n    \"containerInstanceArn\": \"\",\n    \"ec2InstanceId\": \"\",\n    \"capacityProviderName\": \"\",\n    \"version\": {{faker 'datatype.number'}},\n    \"versionInfo\": {\n      \"agentVersion\": \"\",\n      \"agentHash\": \"\",\n      \"dockerVersion\": \"\"\n    },\n    \"remainingResources\": [\n      {\n        \"name\": \"\",\n        \"type\": \"\",\n        \"doubleValue\": {{faker 'datatype.float'}},\n        \"longValue\": {{faker 'datatype.number'}},\n        \"integerValue\": {{faker 'datatype.number'}},\n        \"stringSetValue\": [\n          \"\"\n        ]\n      }\n    ],\n    \"registeredResources\": [\n      {\n        \"name\": \"\",\n        \"type\": \"\",\n        \"doubleValue\": {{faker 'datatype.float'}},\n        \"longValue\": {{faker 'datatype.number'}},\n        \"integerValue\": {{faker 'datatype.number'}},\n        \"stringSetValue\": [\n          \"\"\n        ]\n      }\n    ],\n    \"status\": \"\",\n    \"statusReason\": \"\",\n    \"agentConnected\": {{faker 'datatype.boolean'}},\n    \"runningTasksCount\": {{faker 'datatype.number'}},\n    \"pendingTasksCount\": {{faker 'datatype.number'}},\n    \"agentUpdateStatus\": \"\",\n    \"attributes\": [\n      {\n        \"name\": \"\",\n        \"value\": \"\",\n        \"targetType\": \"\",\n        \"targetId\": \"\"\n      }\n    ],\n    \"registeredAt\": \"{{faker 'date.recent' 365}}\",\n    \"attachments\": [\n      {\n        \"id\": \"\",\n        \"type\": \"\",\n        \"status\": \"\",\n        \"details\": [\n          {\n            \"name\": \"\",\n            \"value\": \"\"\n          }\n        ]\n      }\n    ],\n    \"tags\": [\n      {\n        \"key\": \"\",\n        \"value\": \"\"\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "0f4ca165-bf35-4437-950b-ab1a8d7b4ccc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f6fbdf75-f459-468e-9372-ec8017a89e8f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "0d063632-e3dc-40bf-98a9-15dfe7850937",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "b15474a8-a4d9-437b-a87d-6c2abb4f89af",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "abadc75f-5f08-4b0d-ab80-17100133b198",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UpdateInProgressException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "0ab1da5d-8cbf-4fb1-b864-db45269a5376",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "NoUpdateAvailableException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "4d7e3ab0-3c07-4fbd-9c6e-e95d219358d3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "MissingVersionException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "c89106d0-7896-49b9-820b-0cef2a2f7292",
      "documentation": "<p>Modifies the status of an Amazon ECS container instance.</p> <p>Once a container instance has reached an <code>ACTIVE</code> state, you can change the status of a container instance to <code>DRAINING</code> to manually remove an instance from a cluster, for example to perform system updates, update the Docker daemon, or scale down the cluster size.</p> <important> <p>A container instance cannot be changed to <code>DRAINING</code> until it has reached an <code>ACTIVE</code> status. If the instance is in any other status, an error will be received.</p> </important> <p>When you set a container instance to <code>DRAINING</code>, Amazon ECS prevents new tasks from being scheduled for placement on the container instance and replacement service tasks are started on other container instances in the cluster if the resources are available. Service tasks on the container instance that are in the <code>PENDING</code> state are stopped immediately.</p> <p>Service tasks on the container instance that are in the <code>RUNNING</code> state are stopped and replaced according to the service's deployment configuration parameters, <code>minimumHealthyPercent</code> and <code>maximumPercent</code>. You can change the deployment configuration of your service using <a>UpdateService</a>.</p> <ul> <li> <p>If <code>minimumHealthyPercent</code> is below 100%, the scheduler can ignore <code>desiredCount</code> temporarily during task replacement. For example, <code>desiredCount</code> is four tasks, a minimum of 50% allows the scheduler to stop two existing tasks before starting two new tasks. If the minimum is 100%, the service scheduler can't remove existing tasks until the replacement tasks are considered healthy. Tasks for services that do not use a load balancer are considered healthy if they are in the <code>RUNNING</code> state. Tasks for services that use a load balancer are considered healthy if they are in the <code>RUNNING</code> state and the container instance they are hosted on is reported as healthy by the load balancer.</p> </li> <li> <p>The <code>maximumPercent</code> parameter represents an upper limit on the number of running tasks during task replacement, which enables you to define the replacement batch size. For example, if <code>desiredCount</code> is four tasks, a maximum of 200% starts four new tasks before stopping the four tasks to be drained, provided that the cluster resources required to do this are available. If the maximum is 100%, then replacement tasks can't start until the draining tasks have stopped.</p> </li> </ul> <p>Any <code>PENDING</code> or <code>RUNNING</code> tasks that do not belong to a service are not affected. You must wait for them to finish or stop them manually.</p> <p>A container instance has completed draining when it has no more <code>RUNNING</code> tasks. You can verify this using <a>ListTasks</a>.</p> <p>When a container instance has been drained, you can set a container instance to <code>ACTIVE</code> status and once it has reached that status the Amazon ECS scheduler can begin scheduling tasks on the instance again.</p>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateContainerInstancesState",
      "responses": [
        {
          "uuid": "525a01c7-22a8-46f3-97f2-6b34fc132b3f",
          "body": "{\n  \"containerInstances\": [\n    {\n      \"containerInstanceArn\": \"\",\n      \"ec2InstanceId\": \"\",\n      \"capacityProviderName\": \"\",\n      \"version\": {{faker 'datatype.number'}},\n      \"versionInfo\": {\n        \"agentVersion\": \"\",\n        \"agentHash\": \"\",\n        \"dockerVersion\": \"\"\n      },\n      \"remainingResources\": [\n        {\n          \"name\": \"\",\n          \"type\": \"\",\n          \"doubleValue\": {{faker 'datatype.float'}},\n          \"longValue\": {{faker 'datatype.number'}},\n          \"integerValue\": {{faker 'datatype.number'}},\n          \"stringSetValue\": [\n            \"\"\n          ]\n        }\n      ],\n      \"registeredResources\": [\n        {\n          \"name\": \"\",\n          \"type\": \"\",\n          \"doubleValue\": {{faker 'datatype.float'}},\n          \"longValue\": {{faker 'datatype.number'}},\n          \"integerValue\": {{faker 'datatype.number'}},\n          \"stringSetValue\": [\n            \"\"\n          ]\n        }\n      ],\n      \"status\": \"\",\n      \"statusReason\": \"\",\n      \"agentConnected\": {{faker 'datatype.boolean'}},\n      \"runningTasksCount\": {{faker 'datatype.number'}},\n      \"pendingTasksCount\": {{faker 'datatype.number'}},\n      \"agentUpdateStatus\": \"\",\n      \"attributes\": [\n        {\n          \"name\": \"\",\n          \"value\": \"\",\n          \"targetType\": \"\",\n          \"targetId\": \"\"\n        }\n      ],\n      \"registeredAt\": \"{{faker 'date.recent' 365}}\",\n      \"attachments\": [\n        {\n          \"id\": \"\",\n          \"type\": \"\",\n          \"status\": \"\",\n          \"details\": [\n            {\n              \"name\": \"\",\n              \"value\": \"\"\n            }\n          ]\n        }\n      ],\n      \"tags\": [\n        {\n          \"key\": \"\",\n          \"value\": \"\"\n        }\n      ]\n    }\n  ],\n  \"failures\": [\n    {\n      \"arn\": \"\",\n      \"reason\": \"\",\n      \"detail\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "701e7117-1b1e-4c3a-972d-8f6f79c0ecd2",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "5876bba1-6ec3-4d8f-b857-2608cfce3580",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "ad210d44-2d21-41d2-9edf-f02aff3ddc3f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "8731357d-9897-4bfe-a767-183915c5e9fc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "c097487e-a251-4d3b-9011-d057553dfae8",
      "documentation": "<important> <p>Updating the task placement strategies and constraints on an Amazon ECS service remains in preview and is a Beta Service as defined by and subject to the Beta Service Participation Service Terms located at <a href=\"https://aws.amazon.com/service-terms\">https://aws.amazon.com/service-terms</a> (\"Beta Terms\"). These Beta Terms apply to your participation in this preview.</p> </important> <p>Modifies the parameters of a service.</p> <p>For services using the rolling update (<code>ECS</code>) deployment controller, the desired count, deployment configuration, network configuration, task placement constraints and strategies, or task definition used can be updated.</p> <p>For services using the blue/green (<code>CODE_DEPLOY</code>) deployment controller, only the desired count, deployment configuration, task placement constraints and strategies, and health check grace period can be updated using this API. If the network configuration, platform version, or task definition need to be updated, a new CodeDeploy deployment should be created. For more information, see <a href=\"https://docs.aws.amazon.com/codedeploy/latest/APIReference/API_CreateDeployment.html\">CreateDeployment</a> in the <i>CodeDeploy API Reference</i>.</p> <p>For services using an external deployment controller, you can update only the desired count, task placement constraints and strategies, and health check grace period using this API. If the launch type, load balancer, network configuration, platform version, or task definition need to be updated, you should create a new task set. For more information, see <a>CreateTaskSet</a>.</p> <p>You can add to or subtract from the number of instantiations of a task definition in a service by specifying the cluster that the service is running in and a new <code>desiredCount</code> parameter.</p> <p>If you have updated the Docker image of your application, you can create a new task definition with that image and deploy it to your service. The service scheduler uses the minimum healthy percent and maximum percent parameters (in the service's deployment configuration) to determine the deployment strategy.</p> <note> <p>If your updated Docker image uses the same tag as what is in the existing task definition for your service (for example, <code>my_image:latest</code>), you do not need to create a new revision of your task definition. You can update the service using the <code>forceNewDeployment</code> option. The new tasks launched by the deployment pull the current image/tag combination from your repository when they start.</p> </note> <p>You can also update the deployment configuration of a service. When a deployment is triggered by updating the task definition of a service, the service scheduler uses the deployment configuration parameters, <code>minimumHealthyPercent</code> and <code>maximumPercent</code>, to determine the deployment strategy.</p> <ul> <li> <p>If <code>minimumHealthyPercent</code> is below 100%, the scheduler can ignore <code>desiredCount</code> temporarily during a deployment. For example, if <code>desiredCount</code> is four tasks, a minimum of 50% allows the scheduler to stop two existing tasks before starting two new tasks. Tasks for services that do not use a load balancer are considered healthy if they are in the <code>RUNNING</code> state. Tasks for services that use a load balancer are considered healthy if they are in the <code>RUNNING</code> state and the container instance they are hosted on is reported as healthy by the load balancer.</p> </li> <li> <p>The <code>maximumPercent</code> parameter represents an upper limit on the number of running tasks during a deployment, which enables you to define the deployment batch size. For example, if <code>desiredCount</code> is four tasks, a maximum of 200% starts four new tasks before stopping the four older tasks (provided that the cluster resources required to do this are available).</p> </li> </ul> <p>When <a>UpdateService</a> stops a task during a deployment, the equivalent of <code>docker stop</code> is issued to the containers running in the task. This results in a <code>SIGTERM</code> and a 30-second timeout, after which <code>SIGKILL</code> is sent and the containers are forcibly stopped. If the container handles the <code>SIGTERM</code> gracefully and exits within 30 seconds from receiving it, no <code>SIGKILL</code> is sent.</p> <p>When the service scheduler launches new tasks, it determines task placement in your cluster with the following logic:</p> <ul> <li> <p>Determine which of the container instances in your cluster can support your service's task definition (for example, they have the required CPU, memory, ports, and container instance attributes).</p> </li> <li> <p>By default, the service scheduler attempts to balance tasks across Availability Zones in this manner (although you can choose a different placement strategy):</p> <ul> <li> <p>Sort the valid container instances by the fewest number of running tasks for this service in the same Availability Zone as the instance. For example, if zone A has one running service task and zones B and C each have zero, valid container instances in either zone B or C are considered optimal for placement.</p> </li> <li> <p>Place the new service task on a valid container instance in an optimal Availability Zone (based on the previous steps), favoring container instances with the fewest number of running tasks for this service.</p> </li> </ul> </li> </ul> <p>When the service scheduler stops running tasks, it attempts to maintain balance across the Availability Zones in your cluster using the following logic: </p> <ul> <li> <p>Sort the container instances by the largest number of running tasks for this service in the same Availability Zone as the instance. For example, if zone A has one running service task and zones B and C each have two, container instances in either zone B or C are considered optimal for termination.</p> </li> <li> <p>Stop the task on a container instance in an optimal Availability Zone (based on the previous steps), favoring container instances with the largest number of running tasks for this service.</p> </li> </ul>",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateService",
      "responses": [
        {
          "uuid": "ce5200b1-2fd6-4b2e-b051-03c8240f0d8b",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "73a2eda6-8654-44e1-b6e1-1e33efea08d0",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "1e305750-d533-412f-83ab-f3371bcdf192",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "32062008-3e05-4d98-a550-a7079ec8a0ac",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "c44e8fc4-45eb-43d6-a868-d2c23f11c5a3",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "676b90ef-1e40-477a-b087-eac52196c6d6",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "ServiceNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "8ca6e441-b50b-49dd-a50c-1633ca21387f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ServiceNotActiveException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "aad5e3c6-801b-40bc-b4ce-5d970d52ce6f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "PlatformUnknownException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "d3a0295d-0842-405b-8d81-5df0d2be2c5f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "PlatformTaskDefinitionIncompatibilityException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "088464fe-0644-484e-b132-eb4a044c4a3f",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 488,
          "label": "AccessDeniedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "a71fef77-442e-4f8b-bcca-a03439709c1f",
      "documentation": "Modifies which task set in a service is the primary task set. Any parameters that are updated on the primary task set in a service will transition to the service. This is used when a service uses the <code>EXTERNAL</code> deployment controller type. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\">Amazon ECS Deployment Types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateServicePrimaryTaskSet",
      "responses": [
        {
          "uuid": "bcde0d78-1b52-4b85-b416-1f4027155a9c",
          "body": "{\n  \"taskSet\": {\n    \"id\": \"\",\n    \"taskSetArn\": \"\",\n    \"serviceArn\": \"\",\n    \"clusterArn\": \"\",\n    \"startedBy\": \"\",\n    \"externalId\": \"\",\n    \"status\": \"\",\n    \"taskDefinition\": \"\",\n    \"computedDesiredCount\": {{faker 'datatype.number'}},\n    \"pendingCount\": {{faker 'datatype.number'}},\n    \"runningCount\": {{faker 'datatype.number'}},\n    \"createdAt\": \"{{faker 'date.recent' 365}}\",\n    \"updatedAt\": \"{{faker 'date.recent' 365}}\",\n    \"launchType\": \"\",\n    \"capacityProviderStrategy\": [\n      {\n        \"capacityProvider\": \"\",\n        \"weight\": {{faker 'datatype.number'}},\n        \"base\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"platformVersion\": \"\",\n    \"networkConfiguration\": {\n      \"awsvpcConfiguration\": {\n        \"subnets\": [\n          \"\"\n        ],\n        \"securityGroups\": [\n          \"\"\n        ],\n        \"assignPublicIp\": \"\"\n      }\n    },\n    \"loadBalancers\": [\n      {\n        \"targetGroupArn\": \"\",\n        \"loadBalancerName\": \"\",\n        \"containerName\": \"\",\n        \"containerPort\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"serviceRegistries\": [\n      {\n        \"registryArn\": \"\",\n        \"port\": {{faker 'datatype.number'}},\n        \"containerName\": \"\",\n        \"containerPort\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"scale\": {\n      \"value\": {{faker 'datatype.float'}},\n      \"unit\": \"\"\n    },\n    \"stabilityStatus\": \"\",\n    \"stabilityStatusAt\": \"{{faker 'date.recent' 365}}\",\n    \"tags\": [\n      {\n        \"key\": \"\",\n        \"value\": \"\"\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "77e4a049-2050-4e84-a6a7-4d8db4bd87e7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "e49cb3f2-6c40-48d0-90c3-cb478e960457",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "fe9abafb-df39-4ed0-b869-0daf40692d82",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "b19d9452-e74d-40cb-b8da-273539b1df34",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f6189b3b-3c33-4bae-96c8-36381ee6bbbf",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UnsupportedFeatureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "92a501f1-a3d7-4062-a8ef-e117e61f05ba",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "ServiceNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "ccb5fa57-2cb2-49b4-abde-c6c372540ca7",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "ServiceNotActiveException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "e5374023-a58c-444f-9bf5-0e4cf5ff2f9a",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "TaskSetNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "c24e766c-1a8c-4163-9c67-229670f110bb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 488,
          "label": "AccessDeniedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "4f9cb75f-853e-41f7-83e3-8aaa75be49ec",
      "documentation": "Modifies a task set. This is used when a service uses the <code>EXTERNAL</code> deployment controller type. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-types.html\">Amazon ECS Deployment Types</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.",
      "method": "post",
      "endpoint": "#X-Amz-Target=AmazonEC2ContainerServiceV20141113.UpdateTaskSet",
      "responses": [
        {
          "uuid": "312104c4-c71a-4e0a-aec0-032491cde7f9",
          "body": "{\n  \"taskSet\": {\n    \"id\": \"\",\n    \"taskSetArn\": \"\",\n    \"serviceArn\": \"\",\n    \"clusterArn\": \"\",\n    \"startedBy\": \"\",\n    \"externalId\": \"\",\n    \"status\": \"\",\n    \"taskDefinition\": \"\",\n    \"computedDesiredCount\": {{faker 'datatype.number'}},\n    \"pendingCount\": {{faker 'datatype.number'}},\n    \"runningCount\": {{faker 'datatype.number'}},\n    \"createdAt\": \"{{faker 'date.recent' 365}}\",\n    \"updatedAt\": \"{{faker 'date.recent' 365}}\",\n    \"launchType\": \"\",\n    \"capacityProviderStrategy\": [\n      {\n        \"capacityProvider\": \"\",\n        \"weight\": {{faker 'datatype.number'}},\n        \"base\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"platformVersion\": \"\",\n    \"networkConfiguration\": {\n      \"awsvpcConfiguration\": {\n        \"subnets\": [\n          \"\"\n        ],\n        \"securityGroups\": [\n          \"\"\n        ],\n        \"assignPublicIp\": \"\"\n      }\n    },\n    \"loadBalancers\": [\n      {\n        \"targetGroupArn\": \"\",\n        \"loadBalancerName\": \"\",\n        \"containerName\": \"\",\n        \"containerPort\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"serviceRegistries\": [\n      {\n        \"registryArn\": \"\",\n        \"port\": {{faker 'datatype.number'}},\n        \"containerName\": \"\",\n        \"containerPort\": {{faker 'datatype.number'}}\n      }\n    ],\n    \"scale\": {\n      \"value\": {{faker 'datatype.float'}},\n      \"unit\": \"\"\n    },\n    \"stabilityStatus\": \"\",\n    \"stabilityStatusAt\": \"{{faker 'date.recent' 365}}\",\n    \"tags\": [\n      {\n        \"key\": \"\",\n        \"value\": \"\"\n      }\n    ]\n  }\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Success",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "25a2d793-28ad-410f-8814-83d73c810715",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 480,
          "label": "ServerException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "883eb58a-6657-46cf-ac53-2caf12155618",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 481,
          "label": "ClientException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "51ad63c9-e27e-4a9a-947c-bae81a9decad",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 482,
          "label": "InvalidParameterException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "e71ba5ef-23e1-43b9-9b5c-424cf278a219",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 483,
          "label": "ClusterNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "914dabd1-6c87-420b-8758-248bda59da8b",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 484,
          "label": "UnsupportedFeatureException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "7dbbe2bc-caa9-4064-bd1e-1919b39d7f5e",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 485,
          "label": "AccessDeniedException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "defe6e37-2959-4c1a-9bcf-a2a71b986b19",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 486,
          "label": "ServiceNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "48aadcaa-2238-4c1b-8717-078d026d1bcb",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 487,
          "label": "ServiceNotActiveException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        },
        {
          "uuid": "f85f5fd4-60e4-4eb6-ba8d-bf8bf99946bc",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 488,
          "label": "TaskSetNotFoundException",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "data": []
}