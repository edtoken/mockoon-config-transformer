{
  "uuid": "23038bd0-4f65-4b63-ac98-eb6554bed4d0",
  "lastMigration": 24,
  "name": "Computer Vision Client",
  "endpointPrefix": "vision/v2.1",
  "latency": 0,
  "port": 3000,
  "hostname": "0.0.0.0",
  "routes": [
    {
      "uuid": "d692bd82-94a7-45b0-8ad2-81f8023c9249",
      "documentation": "This operation extracts a rich set of visual features based on the image content.\r\nTwo input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.\r\nA successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.",
      "method": "post",
      "endpoint": "analyze",
      "responses": [
        {
          "uuid": "9537528e-2aac-4cba-9c53-da9501133a20",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 200,
          "label": "The response include the extracted features in JSON format. Here is the definitions for enumeration types:\r\n ClipartType\r\n Non - clipart = 0, ambiguous = 1, normal - clipart = 2, good - clipart = 3. LineDrawingTypeNon - LineDrawing = 0, LineDrawing = 1.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "a063595e-2e0a-4e1d-baad-3931e04579af",
          "body": "{\n  \"code\": \"{{oneOf (array 'InvalidImageFormat' 'UnsupportedMediaType' 'InvalidImageUrl' 'NotSupportedFeature' 'NotSupportedImage' 'Timeout' 'InternalServerError' 'InvalidImageSize' 'BadArgument' 'DetectFaceError' 'NotSupportedLanguage' 'InvalidThumbnailSize' 'InvalidDetails' 'InvalidModel' 'CancelledRequest' 'NotSupportedVisualFeature' 'FailedToProcess' 'Unspecified' 'StorageException')}}\",\n  \"message\": \"\",\n  \"requestId\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Error response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "0de7de11-de04-4768-bc55-dbe6c2ea2f67",
      "documentation": "This operation returns a bounding box around the most important area of the image.\r\nA successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong.\r\nUpon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.",
      "method": "post",
      "endpoint": "areaOfInterest",
      "responses": [
        {
          "uuid": "9ac8c918-1661-4fbb-9aba-c371e16944f0",
          "body": "{\n  \"areaOfInterest\": {\n    \"h\": {{faker 'datatype.number'}},\n    \"w\": {{faker 'datatype.number'}},\n    \"x\": {{faker 'datatype.number'}},\n    \"y\": {{faker 'datatype.number'}}\n  },\n  \"metadata\": {\n    \"format\": \"\",\n    \"height\": {{faker 'datatype.number'}},\n    \"width\": {{faker 'datatype.number'}}\n  },\n  \"requestId\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "The response includes the extracted area of interest in JSON format.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "43152368-03ba-4e31-8aab-5ee7e9178c67",
          "body": "{\n  \"code\": \"{{oneOf (array 'InvalidImageFormat' 'UnsupportedMediaType' 'InvalidImageUrl' 'NotSupportedFeature' 'NotSupportedImage' 'Timeout' 'InternalServerError' 'InvalidImageSize' 'BadArgument' 'DetectFaceError' 'NotSupportedLanguage' 'InvalidThumbnailSize' 'InvalidDetails' 'InvalidModel' 'CancelledRequest' 'NotSupportedVisualFeature' 'FailedToProcess' 'Unspecified' 'StorageException')}}\",\n  \"message\": \"\",\n  \"requestId\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Error response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "b6398376-be2a-43b3-aabb-47bd4b29f756",
      "documentation": "This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.\r\nTwo input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\r\nA successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.",
      "method": "post",
      "endpoint": "describe",
      "responses": [
        {
          "uuid": "d4c57ff7-419b-4fbe-b3be-6fdb84c3d588",
          "body": "{\n  \"description\": {\n    \"captions\": [\n      {\n        \"confidence\": {{faker 'datatype.float'}},\n        \"text\": \"\"\n      }\n    ],\n    \"tags\": [\n      \"\"\n    ]\n  },\n  \"metadata\": {\n    \"format\": \"\",\n    \"height\": {{faker 'datatype.number'}},\n    \"width\": {{faker 'datatype.number'}}\n  },\n  \"requestId\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Image description object.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "07bf074a-4c14-42e0-82f0-663bea0fa977",
          "body": "{\n  \"code\": \"{{oneOf (array 'InvalidImageFormat' 'UnsupportedMediaType' 'InvalidImageUrl' 'NotSupportedFeature' 'NotSupportedImage' 'Timeout' 'InternalServerError' 'InvalidImageSize' 'BadArgument' 'DetectFaceError' 'NotSupportedLanguage' 'InvalidThumbnailSize' 'InvalidDetails' 'InvalidModel' 'CancelledRequest' 'NotSupportedVisualFeature' 'FailedToProcess' 'Unspecified' 'StorageException')}}\",\n  \"message\": \"\",\n  \"requestId\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Error response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "0febffce-f5db-4a36-a3db-a88a0ee252af",
      "documentation": "Performs object detection on the specified image.\r\nTwo input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\r\nA successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.",
      "method": "post",
      "endpoint": "detect",
      "responses": [
        {
          "uuid": "458d97e9-98cb-4227-88e8-a6268a3cd5a1",
          "body": "\"\"",
          "latency": 0,
          "statusCode": 200,
          "label": "The response include the detected objects in JSON format.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "a727daec-1784-4eb3-8986-9981b4e53833",
          "body": "{\n  \"code\": \"{{oneOf (array 'InvalidImageFormat' 'UnsupportedMediaType' 'InvalidImageUrl' 'NotSupportedFeature' 'NotSupportedImage' 'Timeout' 'InternalServerError' 'InvalidImageSize' 'BadArgument' 'DetectFaceError' 'NotSupportedLanguage' 'InvalidThumbnailSize' 'InvalidDetails' 'InvalidModel' 'CancelledRequest' 'NotSupportedVisualFeature' 'FailedToProcess' 'Unspecified' 'StorageException')}}\",\n  \"message\": \"\",\n  \"requestId\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Error response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "d8951f8c-8c9d-42f1-aa11-53f1bc47dea1",
      "documentation": "This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.\r\nA successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.\r\nUpon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.",
      "method": "post",
      "endpoint": "generateThumbnail",
      "responses": [
        {
          "uuid": "84b049bd-6719-4f53-b6ba-f0fb3c91cf0a",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "The generated thumbnail in binary format.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/octet-stream"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "0bfeb61f-d02a-4ee6-820d-23eef63154fd",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "Error response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/octet-stream"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "d818cc0f-e4d3-4130-926f-6378d2bd3153",
      "documentation": "This operation returns the list of domain-specific models that are supported by the Computer Vision API. Currently, the API supports following domain-specific models: celebrity recognizer, landmark recognizer.\r\nA successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.",
      "method": "get",
      "endpoint": "models",
      "responses": [
        {
          "uuid": "9c924aa2-28e7-469b-9bb4-de98605d6cd5",
          "body": "{\n  \"models\": [\n    {\n      \"categories\": [\n        \"\"\n      ],\n      \"name\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "List of available domain models.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "efebbb40-0f07-4e5e-b842-04daf09e858f",
          "body": "{\n  \"code\": \"{{oneOf (array 'InvalidImageFormat' 'UnsupportedMediaType' 'InvalidImageUrl' 'NotSupportedFeature' 'NotSupportedImage' 'Timeout' 'InternalServerError' 'InvalidImageSize' 'BadArgument' 'DetectFaceError' 'NotSupportedLanguage' 'InvalidThumbnailSize' 'InvalidDetails' 'InvalidModel' 'CancelledRequest' 'NotSupportedVisualFeature' 'FailedToProcess' 'Unspecified' 'StorageException')}}\",\n  \"message\": \"\",\n  \"requestId\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Error response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "8f45adae-2979-44a4-9a53-583c8e872abd",
      "documentation": "This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.\r\nTwo input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\r\nA successful response will be returned in JSON.\r\nIf the request failed, the response will contain an error code and a message to help understand what went wrong.",
      "method": "post",
      "endpoint": "models/:model/analyze",
      "responses": [
        {
          "uuid": "fbccaf79-b895-491c-883c-e9e4c064d2c0",
          "body": "{\n  \"metadata\": {\n    \"format\": \"\",\n    \"height\": {{faker 'datatype.number'}},\n    \"width\": {{faker 'datatype.number'}}\n  },\n  \"requestId\": \"\",\n  \"result\": {}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Analysis result based on the domain model.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "014db27d-da6a-4496-9a7d-e7737c392eb2",
          "body": "{\n  \"code\": \"{{oneOf (array 'InvalidImageFormat' 'UnsupportedMediaType' 'InvalidImageUrl' 'NotSupportedFeature' 'NotSupportedImage' 'Timeout' 'InternalServerError' 'InvalidImageSize' 'BadArgument' 'DetectFaceError' 'NotSupportedLanguage' 'InvalidThumbnailSize' 'InvalidDetails' 'InvalidModel' 'CancelledRequest' 'NotSupportedVisualFeature' 'FailedToProcess' 'Unspecified' 'StorageException')}}\",\n  \"message\": \"\",\n  \"requestId\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Error response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "c1b86a99-5c4e-4928-bd77-431844221802",
      "documentation": "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.\r\nUpon success, the OCR results will be returned.\r\nUpon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.",
      "method": "post",
      "endpoint": "ocr",
      "responses": [
        {
          "uuid": "914a6c78-8629-4c9a-bcb5-aa303886d7ad",
          "body": "{\n  \"language\": \"\",\n  \"orientation\": \"\",\n  \"regions\": [\n    {\n      \"boundingBox\": \"\",\n      \"lines\": [\n        {\n          \"boundingBox\": \"\",\n          \"words\": [\n            {\n              \"boundingBox\": \"\",\n              \"text\": \"\"\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"textAngle\": {{faker 'datatype.float'}}\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "The OCR results in the hierarchy of region/line/word. The results include text, bounding box for regions, lines and words. The angle, in radians, of the detected text with respect to the closest horizontal or vertical direction. After rotating the input image clockwise by this angle, the recognized text lines become horizontal or vertical. In combination with the orientation property it can be used to overlay recognition results correctly on the original image, by rotating either the original image or recognition results by a suitable angle around the center of the original image. If the angle cannot be confidently detected, this property is not present. If the image contains text at different angles, only part of the text will be recognized correctly.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "76c32778-20a1-4c0e-bb35-3f019f0d2bd0",
          "body": "{\n  \"code\": \"{{oneOf (array 'InvalidImageFormat' 'UnsupportedMediaType' 'InvalidImageUrl' 'NotSupportedFeature' 'NotSupportedImage' 'Timeout' 'InternalServerError' 'InvalidImageSize' 'BadArgument' 'DetectFaceError' 'NotSupportedLanguage' 'InvalidThumbnailSize' 'InvalidDetails' 'InvalidModel' 'CancelledRequest' 'NotSupportedVisualFeature' 'FailedToProcess' 'Unspecified' 'StorageException')}}\",\n  \"message\": \"\",\n  \"requestId\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Error response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    },
    {
      "uuid": "e20842f5-a7a3-46bb-95bd-5a6dbf6e375f",
      "documentation": "This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the hint \"fungus\".\r\nTwo input methods are supported -- (1) Uploading an image or (2) specifying an image URL.\r\nA successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.",
      "method": "post",
      "endpoint": "tag",
      "responses": [
        {
          "uuid": "8a5bd743-0d7d-4be1-af76-a47845555910",
          "body": "{\n  \"metadata\": {\n    \"format\": \"\",\n    \"height\": {{faker 'datatype.number'}},\n    \"width\": {{faker 'datatype.number'}}\n  },\n  \"requestId\": \"\",\n  \"tags\": [\n    {\n      \"confidence\": {{faker 'datatype.float'}},\n      \"hint\": \"\",\n      \"name\": \"\"\n    }\n  ]\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Image tags object.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true
        },
        {
          "uuid": "216b937f-ff3c-4730-a852-54b93602fa96",
          "body": "{\n  \"code\": \"{{oneOf (array 'InvalidImageFormat' 'UnsupportedMediaType' 'InvalidImageUrl' 'NotSupportedFeature' 'NotSupportedImage' 'Timeout' 'InternalServerError' 'InvalidImageSize' 'BadArgument' 'DetectFaceError' 'NotSupportedLanguage' 'InvalidThumbnailSize' 'InvalidDetails' 'InvalidModel' 'CancelledRequest' 'NotSupportedVisualFeature' 'FailedToProcess' 'Unspecified' 'StorageException')}}\",\n  \"message\": \"\",\n  \"requestId\": \"\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Error response.",
          "headers": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false
        }
      ],
      "enabled": true,
      "responseMode": null
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "data": []
}